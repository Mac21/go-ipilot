// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	Api_keyScopes        = "api_key.Scopes"
	X_access_tokenScopes = "x_access_token.Scopes"
)

// Defines values for AccountInfoAccountType.
const (
	AccountInfoAccountTypeCustomer AccountInfoAccountType = "Customer"
	AccountInfoAccountTypeReseller AccountInfoAccountType = "Reseller"
	AccountInfoAccountTypeUser     AccountInfoAccountType = "User"
)

// Defines values for AccountInfoUpdateAccountType.
const (
	AccountInfoUpdateAccountTypeCustomer AccountInfoUpdateAccountType = "Customer"
	AccountInfoUpdateAccountTypeReseller AccountInfoUpdateAccountType = "Reseller"
	AccountInfoUpdateAccountTypeUser     AccountInfoUpdateAccountType = "User"
)

// Defines values for NumberStatus.
const (
	NumberStatusAll         NumberStatus = "all"
	NumberStatusNew         NumberStatus = "new"
	NumberStatusPendingFoc  NumberStatus = "pending foc"
	NumberStatusPorted      NumberStatus = "ported"
	NumberStatusReceivedFoc NumberStatus = "received foc"
)

// Defines values for UserStatus.
const (
	UserStatusAll                 UserStatus = "all"
	UserStatusAssigned            UserStatus = "assigned"
	UserStatusConfigured          UserStatus = "configured"
	UserStatusFailedToAssign      UserStatus = "failed to assign"
	UserStatusFailedToGrantPolicy UserStatus = "failed to grant policy"
	UserStatusFailedToUnassign    UserStatus = "failed to unassign"
	UserStatusInvalidUpn          UserStatus = "invalid upn"
	UserStatusNotConfigured       UserStatus = "not configured"
	UserStatusPendingAssign       UserStatus = "pending assign"
	UserStatusPendingStopped      UserStatus = "pending stopped"
	UserStatusPendingUnassign     UserStatus = "pending unassign"
	UserStatusQueued              UserStatus = "queued"
	UserStatusStopped             UserStatus = "stopped"
	UserStatusUnassigned          UserStatus = "unassigned"
)

// Defines values for GetMsteamsSubDomainNumbersParamsStatus.
const (
	GetMsteamsSubDomainNumbersParamsStatusAll         GetMsteamsSubDomainNumbersParamsStatus = "all"
	GetMsteamsSubDomainNumbersParamsStatusNew         GetMsteamsSubDomainNumbersParamsStatus = "new"
	GetMsteamsSubDomainNumbersParamsStatusPendingFoc  GetMsteamsSubDomainNumbersParamsStatus = "pending foc"
	GetMsteamsSubDomainNumbersParamsStatusPorted      GetMsteamsSubDomainNumbersParamsStatus = "ported"
	GetMsteamsSubDomainNumbersParamsStatusReceivedFoc GetMsteamsSubDomainNumbersParamsStatus = "received foc"
)

// Defines values for GetMsteamsSubDomainNumbersParamsPage.
const (
	GetMsteamsSubDomainNumbersParamsPageAdded    GetMsteamsSubDomainNumbersParamsPage = "added"
	GetMsteamsSubDomainNumbersParamsPageAll      GetMsteamsSubDomainNumbersParamsPage = "all"
	GetMsteamsSubDomainNumbersParamsPageNotAdded GetMsteamsSubDomainNumbersParamsPage = "not added"
)

// Defines values for GetMsteamsSubDomainUsersParamsTelephoneNumber.
const (
	All                 GetMsteamsSubDomainUsersParamsTelephoneNumber = "all"
	Assigned            GetMsteamsSubDomainUsersParamsTelephoneNumber = "assigned"
	Configured          GetMsteamsSubDomainUsersParamsTelephoneNumber = "configured"
	FailedToAssign      GetMsteamsSubDomainUsersParamsTelephoneNumber = "failed to assign"
	FailedToGrantPolicy GetMsteamsSubDomainUsersParamsTelephoneNumber = "failed to grant policy"
	FailedToUnassign    GetMsteamsSubDomainUsersParamsTelephoneNumber = "failed to unassign"
	InvalidUpn          GetMsteamsSubDomainUsersParamsTelephoneNumber = "invalid upn"
	NotConfigured       GetMsteamsSubDomainUsersParamsTelephoneNumber = "not configured"
	PendingAssign       GetMsteamsSubDomainUsersParamsTelephoneNumber = "pending assign"
	PendingStopped      GetMsteamsSubDomainUsersParamsTelephoneNumber = "pending stopped"
	PendingUnassign     GetMsteamsSubDomainUsersParamsTelephoneNumber = "pending unassign"
	Queued              GetMsteamsSubDomainUsersParamsTelephoneNumber = "queued"
	Stopped             GetMsteamsSubDomainUsersParamsTelephoneNumber = "stopped"
	Unassigned          GetMsteamsSubDomainUsersParamsTelephoneNumber = "unassigned"
)

// AccountInfo defines model for AccountInfo.
type AccountInfo struct {
	AccountType     AccountInfoAccountType `json:"accountType"`
	CustomerAccount *CustomerAccount       `json:"customerAccount,omitempty"`
	ResellerAccount *ResellerAccount       `json:"resellerAccount,omitempty"`
	UserAccount     *UserAccount           `json:"userAccount,omitempty"`
}

// AccountInfoAccountType defines model for AccountInfo.AccountType.
type AccountInfoAccountType string

// AccountInfoUpdate defines model for AccountInfoUpdate.
type AccountInfoUpdate struct {
	AccountType     AccountInfoUpdateAccountType `json:"accountType"`
	CustomerAccount *CustomerAccountUpdate       `json:"customerAccount,omitempty"`
	ResellerAccount *ResellerAccountUpdate       `json:"resellerAccount,omitempty"`
	UserAccount     *UserAccount                 `json:"userAccount,omitempty"`
}

// AccountInfoUpdateAccountType defines model for AccountInfoUpdate.AccountType.
type AccountInfoUpdateAccountType string

// ArrayOfAccountInfo defines model for ArrayOfAccountInfo.
type ArrayOfAccountInfo = []AccountInfo

// ArrayOfAccountUpdateInfo defines model for ArrayOfAccountUpdateInfo.
type ArrayOfAccountUpdateInfo = []AccountInfoUpdate

// ArrayOfCarrierInfo defines model for ArrayOfCarrierInfo.
type ArrayOfCarrierInfo = []CarrierInfo

// ArrayOfDepartmentInfo defines model for ArrayOfDepartmentInfo.
type ArrayOfDepartmentInfo = []DepartmentInfo

// ArrayOfEmergencyAddresses defines model for ArrayOfEmergencyAddresses.
type ArrayOfEmergencyAddresses = []EmergencyAddressInfo

// ArrayOfInternationalCallingInfo defines model for ArrayOfInternationalCallingInfo.
type ArrayOfInternationalCallingInfo = []InternationalCallingInfo

// ArrayOfPhoneNumber defines model for ArrayOfPhoneNumber.
type ArrayOfPhoneNumber = []PhoneNumber

// ArrayOfZoomInfo defines model for ArrayOfZoomInfo.
type ArrayOfZoomInfo = []ZoomInfo

// ArrayOfnumber defines model for ArrayOfnumber.
type ArrayOfnumber = []Number

// ArrayOfuser defines model for ArrayOfuser.
type ArrayOfuser = []User

// ArrayOfusercreate defines model for ArrayOfusercreate.
type ArrayOfusercreate = []Usercreate

// BillingInfo defines model for BillingInfo.
type BillingInfo struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Phone     *string `json:"phone,omitempty"`
}

// CNAMInfo defines model for CNAMInfo.
type CNAMInfo struct {
	BusinessName     *string        `json:"businessName,omitempty"`
	CallingName      string         `json:"callingName"`
	FirstName        string         `json:"firstName"`
	LastName         string         `json:"lastName"`
	TelephoneNumbers *[]interface{} `json:"telephoneNumbers,omitempty"`
}

// CallForwardingInfo defines model for CallForwardingInfo.
type CallForwardingInfo struct {
	CallForwardNumber string         `json:"callForwardNumber"`
	CountryCode       string         `json:"countryCode"`
	TelephoneNumbers  *[]interface{} `json:"telephoneNumbers,omitempty"`
}

// CallingPartyNumberInfo defines model for CallingPartyNumberInfo.
type CallingPartyNumberInfo struct {
	CountryCode      string         `json:"countryCode"`
	CpnNumber        string         `json:"cpnNumber"`
	TelephoneNumbers *[]interface{} `json:"telephoneNumbers,omitempty"`
}

// CarrierInfo defines model for CarrierInfo.
type CarrierInfo struct {
	// Id Carrier ID
	Id *float32 `json:"id,omitempty"`

	// Name Carrier Name
	Name *string `json:"name,omitempty"`
}

// CustomerAccount defines model for CustomerAccount.
type CustomerAccount struct {
	Agent                     *string                   `json:"agent,omitempty"`
	AgentEmail                *string                   `json:"agentEmail,omitempty"`
	BillingInfo               *BillingInfo              `json:"billingInfo,omitempty"`
	City                      *string                   `json:"city,omitempty"`
	CompanyName               *string                   `json:"companyName,omitempty"`
	Country                   *string                   `json:"country,omitempty"`
	CustomerContractingEntity string                    `json:"customerContractingEntity"`
	CustomerId                *int                      `json:"customerId,omitempty"`
	DomesticDIDProvider       *DomesticDIDProvider      `json:"domesticDIDProvider,omitempty"`
	EndCustomerName           string                    `json:"endCustomerName"`
	FqdnId                    *string                   `json:"fqdnId,omitempty"`
	InternationalDIDProvider  *InternationalDIDProvider `json:"internationalDIDProvider,omitempty"`
	LoginInformation          *LoginInformation         `json:"loginInformation,omitempty"`
	ModulesAccess             *ModulesAccess            `json:"modulesAccess,omitempty"`
	NotificationEmail         *string                   `json:"notificationEmail,omitempty"`
	OrderType                 *string                   `json:"orderType,omitempty"`
	ParentId                  string                    `json:"parentId"`
	Plan                      *string                   `json:"plan,omitempty"`
	PrimaryServiceAddress     *PrimaryServiceAddress    `json:"primaryServiceAddress,omitempty"`
	ResellerId                *string                   `json:"resellerId,omitempty"`
	Role                      *string                   `json:"role,omitempty"`
	RoutingProfile            *RoutingProfile           `json:"routingProfile,omitempty"`
	ServiceId                 string                    `json:"serviceId"`
	State                     *string                   `json:"state,omitempty"`
	StreetName                *string                   `json:"streetName,omitempty"`
	StreetNumber              *string                   `json:"streetNumber,omitempty"`
	TechnicalContactInfo      *TechnicalContactInfo     `json:"technicalContactInfo,omitempty"`
	VendorInfo                *VendorInfo               `json:"vendorInfo,omitempty"`
	ZipCode                   *string                   `json:"zipCode,omitempty"`
}

// CustomerAccountUpdate defines model for CustomerAccountUpdate.
type CustomerAccountUpdate struct {
	Agent                     *string                   `json:"agent,omitempty"`
	AgentEmail                *string                   `json:"agentEmail,omitempty"`
	BillingInfo               *BillingInfo              `json:"billingInfo,omitempty"`
	City                      *string                   `json:"city,omitempty"`
	CompanyName               *string                   `json:"companyName,omitempty"`
	Country                   *string                   `json:"country,omitempty"`
	CustomerContractingEntity *string                   `json:"customerContractingEntity,omitempty"`
	DomesticDIDProvider       *DomesticDIDProvider      `json:"domesticDIDProvider,omitempty"`
	EndCustomerName           *string                   `json:"endCustomerName,omitempty"`
	InternationalDIDProvider  *InternationalDIDProvider `json:"internationalDIDProvider,omitempty"`
	LoginInformation          *LoginInformation         `json:"loginInformation,omitempty"`
	ModulesAccess             *ModulesAccess            `json:"modulesAccess,omitempty"`
	NotificationEmail         *string                   `json:"notificationEmail,omitempty"`
	OrderType                 *string                   `json:"orderType,omitempty"`
	ParentId                  *string                   `json:"parentId,omitempty"`
	Plan                      *string                   `json:"plan,omitempty"`
	PrimaryServiceAddress     *PrimaryServiceAddress    `json:"primaryServiceAddress,omitempty"`
	Role                      *string                   `json:"role,omitempty"`
	RoutingProfile            *RoutingProfile           `json:"routingProfile,omitempty"`
	ServiceId                 *string                   `json:"serviceId,omitempty"`
	State                     *string                   `json:"state,omitempty"`
	StreetName                *string                   `json:"streetName,omitempty"`
	StreetNumber              *string                   `json:"streetNumber,omitempty"`
	TechnicalContactInfo      *TechnicalContactInfo     `json:"technicalContactInfo,omitempty"`
	VendorInfo                *VendorInfo               `json:"vendorInfo,omitempty"`
	ZipCode                   *string                   `json:"zipCode,omitempty"`
}

// DepartmentInfo defines model for DepartmentInfo.
type DepartmentInfo struct {
	DepartmentName string `json:"departmentName"`
}

// DisasterPlanInfo defines model for DisasterPlanInfo.
type DisasterPlanInfo struct {
	CallForwardNumber string         `json:"callForwardNumber"`
	CountryCode       string         `json:"countryCode"`
	DisasterPlanID    string         `json:"disasterPlanID"`
	TelephoneNumbers  *[]interface{} `json:"telephoneNumbers,omitempty"`
}

// DomesticDIDProvider defines model for DomesticDIDProvider.
type DomesticDIDProvider = []struct {
	DidCarrier   *string `json:"didCarrier,omitempty"`
	E911Provider *string `json:"e911Provider,omitempty"`
	ProviderName *string `json:"providerName,omitempty"`
}

// EmergencyAddressInfo defines model for EmergencyAddressInfo.
type EmergencyAddressInfo struct {
	// AddressDescription Address Description
	AddressDescription *string `json:"addressDescription,omitempty"`

	// AddressType Address Type
	AddressType *string `json:"addressType,omitempty"`

	// City City
	City *string `json:"city,omitempty"`

	// CountryCode Country Code
	CountryCode *string `json:"countryCode,omitempty"`

	// LocationId Location ID
	LocationId *float32 `json:"locationId,omitempty"`

	// Name Address Location Name
	Name *string `json:"name,omitempty"`

	// PostalCode Postal Code
	PostalCode *string `json:"postalCode,omitempty"`

	// StateCode State Code
	StateCode *string `json:"stateCode,omitempty"`

	// StreetName Address Street Name
	StreetName *string `json:"streetName,omitempty"`

	// StreetNumber Address Street Number
	StreetNumber *string `json:"streetNumber,omitempty"`
}

// InternationalCallingInfo defines model for InternationalCallingInfo.
type InternationalCallingInfo struct {
	Criteria        string `json:"criteria"`
	TelephoneNumber string `json:"telephoneNumber"`
}

// InternationalDIDProvider defines model for InternationalDIDProvider.
type InternationalDIDProvider = []struct {
	Country      *string `json:"country,omitempty"`
	DidCarrier   *string `json:"didCarrier,omitempty"`
	E911Provider *string `json:"e911Provider,omitempty"`
	ProviderName *string `json:"providerName,omitempty"`
}

// LoginInformation defines model for LoginInformation.
type LoginInformation = []struct {
	Email       *string `json:"email,omitempty"`
	FirstName   *string `json:"firstName,omitempty"`
	LastName    *string `json:"lastName,omitempty"`
	Password    *string `json:"password,omitempty"`
	PhoneNumber *string `json:"phoneNumber,omitempty"`
	UserName    *string `json:"userName,omitempty"`
}

// ModulesAccess defines model for ModulesAccess.
type ModulesAccess struct {
	Did              *bool `json:"did,omitempty"`
	EnhancedServices *bool `json:"enhancedServices,omitempty"`
	Msteam           *bool `json:"msteam,omitempty"`
	Stats            *bool `json:"stats,omitempty"`
	Ucaas            *bool `json:"ucaas,omitempty"`
}

// PrimaryServiceAddress defines model for PrimaryServiceAddress.
type PrimaryServiceAddress struct {
	City         *string `json:"city,omitempty"`
	Country      *string `json:"country,omitempty"`
	State        *string `json:"state,omitempty"`
	StreetName   *string `json:"streetName,omitempty"`
	StreetNumber *string `json:"streetNumber,omitempty"`
	ZipCode      *string `json:"zipCode,omitempty"`
}

// ResellerAccount defines model for ResellerAccount.
type ResellerAccount struct {
	Agent                    *string                   `json:"agent,omitempty"`
	AgentEmail               *string                   `json:"agentEmail,omitempty"`
	BillingInfo              *BillingInfo              `json:"billingInfo,omitempty"`
	City                     *string                   `json:"city,omitempty"`
	CompanyName              *string                   `json:"companyName,omitempty"`
	Country                  *string                   `json:"country,omitempty"`
	DomesticDIDProvider      *DomesticDIDProvider      `json:"domesticDIDProvider,omitempty"`
	InternationalDIDProvider *InternationalDIDProvider `json:"internationalDIDProvider,omitempty"`
	LoginInformation         *LoginInformation         `json:"loginInformation,omitempty"`
	ModulesAccess            *ModulesAccess            `json:"modulesAccess,omitempty"`
	NotificationEmail        *string                   `json:"notificationEmail,omitempty"`
	PrimaryServiceAddress    *PrimaryServiceAddress    `json:"primaryServiceAddress,omitempty"`
	ResellerId               *string                   `json:"resellerId,omitempty"`
	RoutingProfile           *RoutingProfile           `json:"routingProfile,omitempty"`
	State                    *string                   `json:"state,omitempty"`
	StreetName               *string                   `json:"streetName,omitempty"`
	StreetNumber             *string                   `json:"streetNumber,omitempty"`
	TechnicalContactInfo     *TechnicalContactInfo     `json:"technicalContactInfo,omitempty"`
	VendorInfo               *VendorInfo               `json:"vendorInfo,omitempty"`
	ZipCode                  *string                   `json:"zipCode,omitempty"`
}

// ResellerAccountUpdate defines model for ResellerAccountUpdate.
type ResellerAccountUpdate struct {
	Agent                    *string                   `json:"agent,omitempty"`
	AgentEmail               *string                   `json:"agentEmail,omitempty"`
	BillingInfo              *BillingInfo              `json:"billingInfo,omitempty"`
	City                     *string                   `json:"city,omitempty"`
	CompanyName              *string                   `json:"companyName,omitempty"`
	Country                  *string                   `json:"country,omitempty"`
	DomesticDIDProvider      *DomesticDIDProvider      `json:"domesticDIDProvider,omitempty"`
	InternationalDIDProvider *InternationalDIDProvider `json:"internationalDIDProvider,omitempty"`
	LoginInformation         *LoginInformation         `json:"loginInformation,omitempty"`
	ModulesAccess            *ModulesAccess            `json:"modulesAccess,omitempty"`
	NotificationEmail        *string                   `json:"notificationEmail,omitempty"`
	PrimaryServiceAddress    *PrimaryServiceAddress    `json:"primaryServiceAddress,omitempty"`
	RoutingProfile           *RoutingProfile           `json:"routingProfile,omitempty"`
	State                    *string                   `json:"state,omitempty"`
	StreetName               *string                   `json:"streetName,omitempty"`
	StreetNumber             *string                   `json:"streetNumber,omitempty"`
	TechnicalContactInfo     *TechnicalContactInfo     `json:"technicalContactInfo,omitempty"`
	VendorInfo               *VendorInfo               `json:"vendorInfo,omitempty"`
	ZipCode                  *string                   `json:"zipCode,omitempty"`
}

// RoutingProfile defines model for RoutingProfile.
type RoutingProfile struct {
	// AccountId For example Rev.io account id
	AccountId *string `json:"accountId,omitempty"`
}

// TechnicalContactInfo defines model for TechnicalContactInfo.
type TechnicalContactInfo struct {
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Phone     *string `json:"phone,omitempty"`
}

// UserAccount defines model for UserAccount.
type UserAccount struct {
	LoginInformation *LoginInformation `json:"loginInformation,omitempty"`
}

// VendorInfo defines model for VendorInfo.
type VendorInfo struct {
	AccountId    *string `json:"accountId,omitempty"`
	ProductCode  string  `json:"productCode"`
	ProfileName  string  `json:"profileName"`
	VendorField1 *string `json:"vendorField1,omitempty"`
	VendorField2 *string `json:"vendorField2,omitempty"`
	VendorField3 *string `json:"vendorField3,omitempty"`
	VendorField4 *string `json:"vendorField4,omitempty"`
	VendorField5 *string `json:"vendorField5,omitempty"`
	VendorField6 *string `json:"vendorField6,omitempty"`
	VendorField7 *string `json:"vendorField7,omitempty"`
	VendorField8 *string `json:"vendorField8,omitempty"`
	VendorField9 *string `json:"vendorField9,omitempty"`
}

// ZoomInfo defines model for ZoomInfo.
type ZoomInfo struct {
	Note            *string `json:"note,omitempty"`
	ProvisionAction string  `json:"provisionAction"`
	ProvisionTo     string  `json:"provisionTo"`
	TelephoneNumber string  `json:"telephoneNumber"`
	UserType        string  `json:"userType"`
}

// AccessToken defines model for accessToken.
type AccessToken struct {
	AccessToken *string `json:"access_token,omitempty"`
	ExpiresAt   *string `json:"expires_at,omitempty"`
}

// AuthCred defines model for authCred.
type AuthCred struct {
	Instance *string `json:"instance,omitempty"`
	Password *string `json:"password,omitempty"`
	Username *string `json:"username,omitempty"`
}

// Number defines model for number.
type Number struct {
	ActivatatedDate *string `json:"activatatedDate,omitempty"`
	OrderType       *string `json:"orderType,omitempty"`
	ProvisionUser   *struct {
		FirstName       *string `json:"firstName,omitempty"`
		Id              *string `json:"id,omitempty"`
		LastName        *string `json:"lastName,omitempty"`
		Note            *string `json:"note,omitempty"`
		Status          *string `json:"status,omitempty"`
		TelephoneNumber *string `json:"telephoneNumber,omitempty"`
		Upn             *string `json:"upn,omitempty"`
	} `json:"provisionUser,omitempty"`
	RouteLabel *string       `json:"routeLabel,omitempty"`
	Status     *NumberStatus `json:"status,omitempty"`
	SubType    *string       `json:"subType,omitempty"`
	Tn         *string       `json:"tn,omitempty"`
	TnFeatures *struct {
		Cnam *string `json:"cnam,omitempty"`
		E911 *string `json:"e911,omitempty"`
	} `json:"tnFeatures,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NumberStatus defines model for Number.Status.
type NumberStatus string

// PhoneNumber defines model for phoneNumber.
type PhoneNumber struct {
	CountryCode *string `json:"countryCode,omitempty"`
	Number      *string `json:"number,omitempty"`
}

// Status defines model for status.
type Status struct {
	Status     *string `json:"status,omitempty"`
	StatusCode *string `json:"statusCode,omitempty"`
}

// User defines model for user.
type User struct {
	FirstName       *string     `json:"firstName,omitempty"`
	Id              *int32      `json:"id,omitempty"`
	LastName        *string     `json:"lastName,omitempty"`
	Note            *string     `json:"note,omitempty"`
	Status          *UserStatus `json:"status,omitempty"`
	TelephoneNumber *string     `json:"telephoneNumber,omitempty"`
	Upn             *string     `json:"upn,omitempty"`
}

// UserStatus defines model for User.Status.
type UserStatus string

// Usercreate defines model for usercreate.
type Usercreate struct {
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
	Note      *string `json:"note,omitempty"`

	// TelephoneNumber An unassigned phone number in application pool OR leave blank for next available free number.  If no numbers available in pool, fails with error_blah
	TelephoneNumber string `json:"telephoneNumber"`
	Upn             string `json:"upn"`
}

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// Instance this would be your platform identifier, [instance].ipilot.io
	Instance *string `form:"instance,omitempty" json:"instance,omitempty"`
	XApiKey  *string `json:"x-api-key,omitempty"`
	Cookie   *string `json:"Cookie,omitempty"`
}

// GetAccountsCustomersParams defines parameters for GetAccountsCustomers.
type GetAccountsCustomersParams struct {
	// Instance this would be your platform identifier, [instance].ipilot.io
	Instance *string `form:"instance,omitempty" json:"instance,omitempty"`

	// Limit page number to return
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// Filter Filter for account results, example
	// filter=customerAccount.customerId:26
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`

	// CustomerLimit page number to return of customers
	CustomerLimit *string `form:"customerLimit,omitempty" json:"customerLimit,omitempty"`
	XApiKey       *string `json:"x-api-key,omitempty"`
	Cookie        *string `json:"Cookie,omitempty"`
}

// GetAccountsResellersParams defines parameters for GetAccountsResellers.
type GetAccountsResellersParams struct {
	// Instance this would be your platform identifier, [instance].ipilot.io
	Instance *string `form:"instance,omitempty" json:"instance,omitempty"`

	// Limit page number to return
	Limit   *string `form:"limit,omitempty" json:"limit,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PostAccountsResellersParams defines parameters for PostAccountsResellers.
type PostAccountsResellersParams struct {
	Cookie  *string `json:"Cookie,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
}

// DeleteAccountsIdParams defines parameters for DeleteAccountsId.
type DeleteAccountsIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetAccountsIdParams defines parameters for GetAccountsId.
type GetAccountsIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PutAccountsIdParams defines parameters for PutAccountsId.
type PutAccountsIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PostCallForwardingCustomerIdParams defines parameters for PostCallForwardingCustomerId.
type PostCallForwardingCustomerIdParams struct {
	Cookie  *string `json:"Cookie,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
}

// PutCallForwardingCustomerIdParams defines parameters for PutCallForwardingCustomerId.
type PutCallForwardingCustomerIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetCallForwardingCustomerIdPhoneNumberParams defines parameters for GetCallForwardingCustomerIdPhoneNumber.
type GetCallForwardingCustomerIdPhoneNumberParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// DeleteCallForwardingIdParams defines parameters for DeleteCallForwardingId.
type DeleteCallForwardingIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PostCallingPartyNumberCustomerIdParams defines parameters for PostCallingPartyNumberCustomerId.
type PostCallingPartyNumberCustomerIdParams struct {
	Cookie  *string `json:"Cookie,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
}

// DeleteCallingPartyNumberPhoneNumberParams defines parameters for DeleteCallingPartyNumberPhoneNumber.
type DeleteCallingPartyNumberPhoneNumberParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetCallingPartyNumberPhoneNumberParams defines parameters for GetCallingPartyNumberPhoneNumber.
type GetCallingPartyNumberPhoneNumberParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PostCnamCustomerIdParams defines parameters for PostCnamCustomerId.
type PostCnamCustomerIdParams struct {
	Cookie  *string `json:"Cookie,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
}

// DeleteCnamPhoneNumberParams defines parameters for DeleteCnamPhoneNumber.
type DeleteCnamPhoneNumberParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetCnamPhoneNumberParams defines parameters for GetCnamPhoneNumber.
type GetCnamPhoneNumberParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// DeleteDisasterPlanCustomerIdParams defines parameters for DeleteDisasterPlanCustomerId.
type DeleteDisasterPlanCustomerIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetDisasterPlanCustomerIdParams defines parameters for GetDisasterPlanCustomerId.
type GetDisasterPlanCustomerIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PostDisasterPlanCustomerIdParams defines parameters for PostDisasterPlanCustomerId.
type PostDisasterPlanCustomerIdParams struct {
	Cookie  *string `json:"Cookie,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
}

// PutDisasterPlanCustomerIdParams defines parameters for PutDisasterPlanCustomerId.
type PutDisasterPlanCustomerIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PostInternationalCallingCustomerIdParams defines parameters for PostInternationalCallingCustomerId.
type PostInternationalCallingCustomerIdParams struct {
	Cookie  *string `json:"Cookie,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
}

// DeleteInternationalCallingPhoneNumberParams defines parameters for DeleteInternationalCallingPhoneNumber.
type DeleteInternationalCallingPhoneNumberParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetInternationalCallingPhoneNumberParams defines parameters for GetInternationalCallingPhoneNumber.
type GetInternationalCallingPhoneNumberParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetMsteamsParams defines parameters for GetMsteams.
type GetMsteamsParams struct {
	Limit   *string `form:"limit,omitempty" json:"limit,omitempty"`
	Page    *string `form:"page,omitempty" json:"page,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetMsteamsSubDomainNumbersParams defines parameters for GetMsteamsSubDomainNumbers.
type GetMsteamsSubDomainNumbersParams struct {
	// Limit Limits the number of items on a page
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// TelephoneNumber page number to return
	TelephoneNumber *string `form:"telephoneNumber,omitempty" json:"telephoneNumber,omitempty"`

	// Status Filter by status
	Status *GetMsteamsSubDomainNumbersParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// Page Filter by UPN
	Page    *GetMsteamsSubDomainNumbersParamsPage `form:"page,omitempty" json:"page,omitempty"`
	Upn     *string                               `form:"upn,omitempty" json:"upn,omitempty"`
	XApiKey *string                               `json:"x-api-key,omitempty"`

	// Cookie Filter by telephoneNumber
	Cookie *string `json:"Cookie,omitempty"`
}

// GetMsteamsSubDomainNumbersParamsStatus defines parameters for GetMsteamsSubDomainNumbers.
type GetMsteamsSubDomainNumbersParamsStatus string

// GetMsteamsSubDomainNumbersParamsPage defines parameters for GetMsteamsSubDomainNumbers.
type GetMsteamsSubDomainNumbersParamsPage string

// GetMsteamsSubDomainUsersParams defines parameters for GetMsteamsSubDomainUsers.
type GetMsteamsSubDomainUsersParams struct {
	// Limit page number to return
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// TelephoneNumber Filter by status
	TelephoneNumber *GetMsteamsSubDomainUsersParamsTelephoneNumber `form:"telephoneNumber,omitempty" json:"telephoneNumber,omitempty"`

	// Note Filter by last name
	Note *string `form:"note,omitempty" json:"note,omitempty"`

	// Status Filter by first name
	Status *string `form:"status,omitempty" json:"status,omitempty"`

	// Page Filter by UPN
	Page *string `form:"page,omitempty" json:"page,omitempty"`

	// FirstName Filter by note
	FirstName *string `form:"firstName,omitempty" json:"firstName,omitempty"`

	// LastName Filter by telephoneNumber
	LastName *string `form:"lastName,omitempty" json:"lastName,omitempty"`
	Upn      *string `form:"upn,omitempty" json:"upn,omitempty"`
	XApiKey  *string `json:"x-api-key,omitempty"`
	Cookie   *string `json:"Cookie,omitempty"`
}

// GetMsteamsSubDomainUsersParamsTelephoneNumber defines parameters for GetMsteamsSubDomainUsers.
type GetMsteamsSubDomainUsersParamsTelephoneNumber string

// PostMsteamsSubDomainUsersParams defines parameters for PostMsteamsSubDomainUsers.
type PostMsteamsSubDomainUsersParams struct {
	Cookie  *string `json:"Cookie,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
}

// DeleteMsteamsSubDomainUsersIdParams defines parameters for DeleteMsteamsSubDomainUsersId.
type DeleteMsteamsSubDomainUsersIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetMsteamsSubDomainUsersIdParams defines parameters for GetMsteamsSubDomainUsersId.
type GetMsteamsSubDomainUsersIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PutMsteamsSubDomainUsersIdParams defines parameters for PutMsteamsSubDomainUsersId.
type PutMsteamsSubDomainUsersIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetMsteamsSubdomainCarriersParams defines parameters for GetMsteamsSubdomainCarriers.
type GetMsteamsSubdomainCarriersParams struct {
	// Instance this would be your platform identifier, [instance].ipilot.io
	Instance *string `form:"instance,omitempty" json:"instance,omitempty"`

	// CustomerId this would be the customer id field
	CustomerId int     `form:"customerId" json:"customerId"`
	XApiKey    *string `json:"x-api-key,omitempty"`
}

// GetMsteamsSubdomainCarriersIdNumbersParams defines parameters for GetMsteamsSubdomainCarriersIdNumbers.
type GetMsteamsSubdomainCarriersIdNumbersParams struct {
	// Instance this would be your platform identifier, [instance].ipilot.io
	Instance *string `form:"instance,omitempty" json:"instance,omitempty"`

	// CustomerId this would be the customer id field
	CustomerId int     `form:"customerId" json:"customerId"`
	XApiKey    *string `json:"x-api-key,omitempty"`
	Cookie     *string `json:"Cookie,omitempty"`
}

// PostMsteamsSubdomainCarriersIdNumbersParams defines parameters for PostMsteamsSubdomainCarriersIdNumbers.
type PostMsteamsSubdomainCarriersIdNumbersParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetMsteamsSubdomainEmergencyAddressesParams defines parameters for GetMsteamsSubdomainEmergencyAddresses.
type GetMsteamsSubdomainEmergencyAddressesParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PostMsteamsSubdomainEmergencyAddressesParams defines parameters for PostMsteamsSubdomainEmergencyAddresses.
type PostMsteamsSubdomainEmergencyAddressesParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// DeleteMsteamsSubdomainEmergencyAddressesIdParams defines parameters for DeleteMsteamsSubdomainEmergencyAddressesId.
type DeleteMsteamsSubdomainEmergencyAddressesIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PutMsteamsSubdomainEmergencyAddressesIdParams defines parameters for PutMsteamsSubdomainEmergencyAddressesId.
type PutMsteamsSubdomainEmergencyAddressesIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PostOauth2AuthorizeParams defines parameters for PostOauth2Authorize.
type PostOauth2AuthorizeParams struct {
	Cookie *string `json:"Cookie,omitempty"`
}

// GetSiteParams defines parameters for GetSite.
type GetSiteParams struct {
	// Limit page number to return
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// SiteLimit page number to return of sites
	SiteLimit *string `form:"siteLimit,omitempty" json:"siteLimit,omitempty"`
	XApiKey   *string `json:"x-api-key,omitempty"`
	Cookie    *string `json:"Cookie,omitempty"`
}

// PostSiteParams defines parameters for PostSite.
type PostSiteParams struct {
	Cookie  *string `json:"Cookie,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
}

// DeleteSiteIdParams defines parameters for DeleteSiteId.
type DeleteSiteIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetSiteIdParams defines parameters for GetSiteId.
type GetSiteIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PutSiteIdParams defines parameters for PutSiteId.
type PutSiteIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// GetZoomParams defines parameters for GetZoom.
type GetZoomParams struct {
	Limit   *string `form:"limit,omitempty" json:"limit,omitempty"`
	Page    *string `form:"page,omitempty" json:"page,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PostZoomParams defines parameters for PostZoom.
type PostZoomParams struct {
	Cookie  *string `json:"Cookie,omitempty"`
	XApiKey *string `json:"x-api-key,omitempty"`
}

// GetZoomProvisionToIdParams defines parameters for GetZoomProvisionToId.
type GetZoomProvisionToIdParams struct {
	XApiKey *string `json:"x-api-key,omitempty"`
	Cookie  *string `json:"Cookie,omitempty"`
}

// PostAccountsResellersJSONRequestBody defines body for PostAccountsResellers for application/json ContentType.
type PostAccountsResellersJSONRequestBody = ArrayOfAccountUpdateInfo

// PutAccountsIdJSONRequestBody defines body for PutAccountsId for application/json ContentType.
type PutAccountsIdJSONRequestBody = AccountInfo

// PostCallForwardingCustomerIdJSONRequestBody defines body for PostCallForwardingCustomerId for application/json ContentType.
type PostCallForwardingCustomerIdJSONRequestBody = CallForwardingInfo

// PutCallForwardingCustomerIdJSONRequestBody defines body for PutCallForwardingCustomerId for application/json ContentType.
type PutCallForwardingCustomerIdJSONRequestBody = CallForwardingInfo

// PostCallingPartyNumberCustomerIdJSONRequestBody defines body for PostCallingPartyNumberCustomerId for application/json ContentType.
type PostCallingPartyNumberCustomerIdJSONRequestBody = CallingPartyNumberInfo

// PostCnamCustomerIdJSONRequestBody defines body for PostCnamCustomerId for application/json ContentType.
type PostCnamCustomerIdJSONRequestBody = CNAMInfo

// PostDisasterPlanCustomerIdJSONRequestBody defines body for PostDisasterPlanCustomerId for application/json ContentType.
type PostDisasterPlanCustomerIdJSONRequestBody = DisasterPlanInfo

// PutDisasterPlanCustomerIdJSONRequestBody defines body for PutDisasterPlanCustomerId for application/json ContentType.
type PutDisasterPlanCustomerIdJSONRequestBody = DisasterPlanInfo

// PostInternationalCallingCustomerIdJSONRequestBody defines body for PostInternationalCallingCustomerId for application/json ContentType.
type PostInternationalCallingCustomerIdJSONRequestBody = ArrayOfInternationalCallingInfo

// PostMsteamsSubDomainUsersJSONRequestBody defines body for PostMsteamsSubDomainUsers for application/json ContentType.
type PostMsteamsSubDomainUsersJSONRequestBody = ArrayOfusercreate

// PutMsteamsSubDomainUsersIdJSONRequestBody defines body for PutMsteamsSubDomainUsersId for application/json ContentType.
type PutMsteamsSubDomainUsersIdJSONRequestBody = Usercreate

// PostMsteamsSubdomainCarriersIdNumbersJSONRequestBody defines body for PostMsteamsSubdomainCarriersIdNumbers for application/json ContentType.
type PostMsteamsSubdomainCarriersIdNumbersJSONRequestBody = ArrayOfPhoneNumber

// PostMsteamsSubdomainEmergencyAddressesJSONRequestBody defines body for PostMsteamsSubdomainEmergencyAddresses for application/json ContentType.
type PostMsteamsSubdomainEmergencyAddressesJSONRequestBody = EmergencyAddressInfo

// PutMsteamsSubdomainEmergencyAddressesIdJSONRequestBody defines body for PutMsteamsSubdomainEmergencyAddressesId for application/json ContentType.
type PutMsteamsSubdomainEmergencyAddressesIdJSONRequestBody = EmergencyAddressInfo

// PostOauth2AuthorizeFormdataRequestBody defines body for PostOauth2Authorize for application/x-www-form-urlencoded ContentType.
type PostOauth2AuthorizeFormdataRequestBody = AuthCred

// PostSiteJSONRequestBody defines body for PostSite for application/json ContentType.
type PostSiteJSONRequestBody = ArrayOfDepartmentInfo

// PutSiteIdJSONRequestBody defines body for PutSiteId for application/json ContentType.
type PutSiteIdJSONRequestBody = DepartmentInfo

// PostZoomJSONRequestBody defines body for PostZoom for application/json ContentType.
type PostZoomJSONRequestBody = ArrayOfZoomInfo

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAccounts request
	GetAccounts(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsCustomers request
	GetAccountsCustomers(ctx context.Context, params *GetAccountsCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsResellers request
	GetAccountsResellers(ctx context.Context, params *GetAccountsResellersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAccountsResellersWithBody request with any body
	PostAccountsResellersWithBody(ctx context.Context, params *PostAccountsResellersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAccountsResellers(ctx context.Context, params *PostAccountsResellersParams, body PostAccountsResellersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAccountsId request
	DeleteAccountsId(ctx context.Context, id string, params *DeleteAccountsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAccountsId request
	GetAccountsId(ctx context.Context, id string, params *GetAccountsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAccountsIdWithBody request with any body
	PutAccountsIdWithBody(ctx context.Context, id string, params *PutAccountsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutAccountsId(ctx context.Context, id string, params *PutAccountsIdParams, body PutAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallForwardingCustomerIdWithBody request with any body
	PostCallForwardingCustomerIdWithBody(ctx context.Context, customerId int, params *PostCallForwardingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCallForwardingCustomerId(ctx context.Context, customerId int, params *PostCallForwardingCustomerIdParams, body PostCallForwardingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutCallForwardingCustomerIdWithBody request with any body
	PutCallForwardingCustomerIdWithBody(ctx context.Context, customerId int, params *PutCallForwardingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutCallForwardingCustomerId(ctx context.Context, customerId int, params *PutCallForwardingCustomerIdParams, body PutCallForwardingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCallForwardingCustomerIdPhoneNumber request
	GetCallForwardingCustomerIdPhoneNumber(ctx context.Context, customerId int, phoneNumber float32, params *GetCallForwardingCustomerIdPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallForwardingId request
	DeleteCallForwardingId(ctx context.Context, id string, params *DeleteCallForwardingIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallingPartyNumberCustomerIdWithBody request with any body
	PostCallingPartyNumberCustomerIdWithBody(ctx context.Context, customerId int, params *PostCallingPartyNumberCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCallingPartyNumberCustomerId(ctx context.Context, customerId int, params *PostCallingPartyNumberCustomerIdParams, body PostCallingPartyNumberCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallingPartyNumberPhoneNumber request
	DeleteCallingPartyNumberPhoneNumber(ctx context.Context, phoneNumber string, params *DeleteCallingPartyNumberPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCallingPartyNumberPhoneNumber request
	GetCallingPartyNumberPhoneNumber(ctx context.Context, phoneNumber float32, params *GetCallingPartyNumberPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCnamCustomerIdWithBody request with any body
	PostCnamCustomerIdWithBody(ctx context.Context, customerId int, params *PostCnamCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostCnamCustomerId(ctx context.Context, customerId int, params *PostCnamCustomerIdParams, body PostCnamCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCnamPhoneNumber request
	DeleteCnamPhoneNumber(ctx context.Context, phoneNumber string, params *DeleteCnamPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetCnamPhoneNumber request
	GetCnamPhoneNumber(ctx context.Context, phoneNumber float32, params *GetCnamPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDisasterPlanCustomerId request
	DeleteDisasterPlanCustomerId(ctx context.Context, customerId int, params *DeleteDisasterPlanCustomerIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDisasterPlanCustomerId request
	GetDisasterPlanCustomerId(ctx context.Context, customerId int, params *GetDisasterPlanCustomerIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDisasterPlanCustomerIdWithBody request with any body
	PostDisasterPlanCustomerIdWithBody(ctx context.Context, customerId int, params *PostDisasterPlanCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDisasterPlanCustomerId(ctx context.Context, customerId int, params *PostDisasterPlanCustomerIdParams, body PostDisasterPlanCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutDisasterPlanCustomerIdWithBody request with any body
	PutDisasterPlanCustomerIdWithBody(ctx context.Context, customerId int, params *PutDisasterPlanCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutDisasterPlanCustomerId(ctx context.Context, customerId int, params *PutDisasterPlanCustomerIdParams, body PutDisasterPlanCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostInternationalCallingCustomerIdWithBody request with any body
	PostInternationalCallingCustomerIdWithBody(ctx context.Context, customerId int, params *PostInternationalCallingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostInternationalCallingCustomerId(ctx context.Context, customerId int, params *PostInternationalCallingCustomerIdParams, body PostInternationalCallingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInternationalCallingPhoneNumber request
	DeleteInternationalCallingPhoneNumber(ctx context.Context, phoneNumber string, params *DeleteInternationalCallingPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInternationalCallingPhoneNumber request
	GetInternationalCallingPhoneNumber(ctx context.Context, phoneNumber float32, params *GetInternationalCallingPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMsteams request
	GetMsteams(ctx context.Context, params *GetMsteamsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMsteamsSubDomainNumbers request
	GetMsteamsSubDomainNumbers(ctx context.Context, subDomain string, params *GetMsteamsSubDomainNumbersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMsteamsSubDomainUsers request
	GetMsteamsSubDomainUsers(ctx context.Context, subDomain string, params *GetMsteamsSubDomainUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMsteamsSubDomainUsersWithBody request with any body
	PostMsteamsSubDomainUsersWithBody(ctx context.Context, subDomain string, params *PostMsteamsSubDomainUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMsteamsSubDomainUsers(ctx context.Context, subDomain string, params *PostMsteamsSubDomainUsersParams, body PostMsteamsSubDomainUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMsteamsSubDomainUsersId request
	DeleteMsteamsSubDomainUsersId(ctx context.Context, subDomain string, id string, params *DeleteMsteamsSubDomainUsersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMsteamsSubDomainUsersId request
	GetMsteamsSubDomainUsersId(ctx context.Context, subDomain string, id string, params *GetMsteamsSubDomainUsersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMsteamsSubDomainUsersIdWithBody request with any body
	PutMsteamsSubDomainUsersIdWithBody(ctx context.Context, subDomain string, id string, params *PutMsteamsSubDomainUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMsteamsSubDomainUsersId(ctx context.Context, subDomain string, id string, params *PutMsteamsSubDomainUsersIdParams, body PutMsteamsSubDomainUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMsteamsSubdomainCarriers request
	GetMsteamsSubdomainCarriers(ctx context.Context, subdomain string, params *GetMsteamsSubdomainCarriersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMsteamsSubdomainCarriersIdNumbers request
	GetMsteamsSubdomainCarriersIdNumbers(ctx context.Context, subdomain string, id string, params *GetMsteamsSubdomainCarriersIdNumbersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMsteamsSubdomainCarriersIdNumbersWithBody request with any body
	PostMsteamsSubdomainCarriersIdNumbersWithBody(ctx context.Context, subdomain string, id string, params *PostMsteamsSubdomainCarriersIdNumbersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMsteamsSubdomainCarriersIdNumbers(ctx context.Context, subdomain string, id string, params *PostMsteamsSubdomainCarriersIdNumbersParams, body PostMsteamsSubdomainCarriersIdNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMsteamsSubdomainEmergencyAddresses request
	GetMsteamsSubdomainEmergencyAddresses(ctx context.Context, subdomain string, params *GetMsteamsSubdomainEmergencyAddressesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMsteamsSubdomainEmergencyAddressesWithBody request with any body
	PostMsteamsSubdomainEmergencyAddressesWithBody(ctx context.Context, subdomain string, params *PostMsteamsSubdomainEmergencyAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostMsteamsSubdomainEmergencyAddresses(ctx context.Context, subdomain string, params *PostMsteamsSubdomainEmergencyAddressesParams, body PostMsteamsSubdomainEmergencyAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMsteamsSubdomainEmergencyAddressesId request
	DeleteMsteamsSubdomainEmergencyAddressesId(ctx context.Context, subdomain string, id string, params *DeleteMsteamsSubdomainEmergencyAddressesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMsteamsSubdomainEmergencyAddressesIdWithBody request with any body
	PutMsteamsSubdomainEmergencyAddressesIdWithBody(ctx context.Context, subdomain string, id string, params *PutMsteamsSubdomainEmergencyAddressesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMsteamsSubdomainEmergencyAddressesId(ctx context.Context, subdomain string, id string, params *PutMsteamsSubdomainEmergencyAddressesIdParams, body PutMsteamsSubdomainEmergencyAddressesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOauth2AuthorizeWithBody request with any body
	PostOauth2AuthorizeWithBody(ctx context.Context, params *PostOauth2AuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOauth2AuthorizeWithFormdataBody(ctx context.Context, params *PostOauth2AuthorizeParams, body PostOauth2AuthorizeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSite request
	GetSite(ctx context.Context, params *GetSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSiteWithBody request with any body
	PostSiteWithBody(ctx context.Context, params *PostSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSite(ctx context.Context, params *PostSiteParams, body PostSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSiteId request
	DeleteSiteId(ctx context.Context, id string, params *DeleteSiteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSiteId request
	GetSiteId(ctx context.Context, id string, params *GetSiteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutSiteIdWithBody request with any body
	PutSiteIdWithBody(ctx context.Context, id string, params *PutSiteIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutSiteId(ctx context.Context, id string, params *PutSiteIdParams, body PutSiteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoom request
	GetZoom(ctx context.Context, params *GetZoomParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostZoomWithBody request with any body
	PostZoomWithBody(ctx context.Context, params *PostZoomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostZoom(ctx context.Context, params *PostZoomParams, body PostZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZoomProvisionToId request
	GetZoomProvisionToId(ctx context.Context, id string, params *GetZoomProvisionToIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAccounts(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsCustomers(ctx context.Context, params *GetAccountsCustomersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsCustomersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsResellers(ctx context.Context, params *GetAccountsResellersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsResellersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsResellersWithBody(ctx context.Context, params *PostAccountsResellersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsResellersRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAccountsResellers(ctx context.Context, params *PostAccountsResellersParams, body PostAccountsResellersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAccountsResellersRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAccountsId(ctx context.Context, id string, params *DeleteAccountsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAccountsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAccountsId(ctx context.Context, id string, params *GetAccountsIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAccountsIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccountsIdWithBody(ctx context.Context, id string, params *PutAccountsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccountsIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAccountsId(ctx context.Context, id string, params *PutAccountsIdParams, body PutAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAccountsIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallForwardingCustomerIdWithBody(ctx context.Context, customerId int, params *PostCallForwardingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallForwardingCustomerIdRequestWithBody(c.Server, customerId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallForwardingCustomerId(ctx context.Context, customerId int, params *PostCallForwardingCustomerIdParams, body PostCallForwardingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallForwardingCustomerIdRequest(c.Server, customerId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCallForwardingCustomerIdWithBody(ctx context.Context, customerId int, params *PutCallForwardingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCallForwardingCustomerIdRequestWithBody(c.Server, customerId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutCallForwardingCustomerId(ctx context.Context, customerId int, params *PutCallForwardingCustomerIdParams, body PutCallForwardingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutCallForwardingCustomerIdRequest(c.Server, customerId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallForwardingCustomerIdPhoneNumber(ctx context.Context, customerId int, phoneNumber float32, params *GetCallForwardingCustomerIdPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallForwardingCustomerIdPhoneNumberRequest(c.Server, customerId, phoneNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallForwardingId(ctx context.Context, id string, params *DeleteCallForwardingIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallForwardingIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallingPartyNumberCustomerIdWithBody(ctx context.Context, customerId int, params *PostCallingPartyNumberCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallingPartyNumberCustomerIdRequestWithBody(c.Server, customerId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallingPartyNumberCustomerId(ctx context.Context, customerId int, params *PostCallingPartyNumberCustomerIdParams, body PostCallingPartyNumberCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallingPartyNumberCustomerIdRequest(c.Server, customerId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallingPartyNumberPhoneNumber(ctx context.Context, phoneNumber string, params *DeleteCallingPartyNumberPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallingPartyNumberPhoneNumberRequest(c.Server, phoneNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCallingPartyNumberPhoneNumber(ctx context.Context, phoneNumber float32, params *GetCallingPartyNumberPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCallingPartyNumberPhoneNumberRequest(c.Server, phoneNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCnamCustomerIdWithBody(ctx context.Context, customerId int, params *PostCnamCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCnamCustomerIdRequestWithBody(c.Server, customerId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCnamCustomerId(ctx context.Context, customerId int, params *PostCnamCustomerIdParams, body PostCnamCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCnamCustomerIdRequest(c.Server, customerId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCnamPhoneNumber(ctx context.Context, phoneNumber string, params *DeleteCnamPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCnamPhoneNumberRequest(c.Server, phoneNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetCnamPhoneNumber(ctx context.Context, phoneNumber float32, params *GetCnamPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetCnamPhoneNumberRequest(c.Server, phoneNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDisasterPlanCustomerId(ctx context.Context, customerId int, params *DeleteDisasterPlanCustomerIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDisasterPlanCustomerIdRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDisasterPlanCustomerId(ctx context.Context, customerId int, params *GetDisasterPlanCustomerIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDisasterPlanCustomerIdRequest(c.Server, customerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDisasterPlanCustomerIdWithBody(ctx context.Context, customerId int, params *PostDisasterPlanCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDisasterPlanCustomerIdRequestWithBody(c.Server, customerId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDisasterPlanCustomerId(ctx context.Context, customerId int, params *PostDisasterPlanCustomerIdParams, body PostDisasterPlanCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDisasterPlanCustomerIdRequest(c.Server, customerId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDisasterPlanCustomerIdWithBody(ctx context.Context, customerId int, params *PutDisasterPlanCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDisasterPlanCustomerIdRequestWithBody(c.Server, customerId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutDisasterPlanCustomerId(ctx context.Context, customerId int, params *PutDisasterPlanCustomerIdParams, body PutDisasterPlanCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutDisasterPlanCustomerIdRequest(c.Server, customerId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInternationalCallingCustomerIdWithBody(ctx context.Context, customerId int, params *PostInternationalCallingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInternationalCallingCustomerIdRequestWithBody(c.Server, customerId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostInternationalCallingCustomerId(ctx context.Context, customerId int, params *PostInternationalCallingCustomerIdParams, body PostInternationalCallingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostInternationalCallingCustomerIdRequest(c.Server, customerId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInternationalCallingPhoneNumber(ctx context.Context, phoneNumber string, params *DeleteInternationalCallingPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInternationalCallingPhoneNumberRequest(c.Server, phoneNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInternationalCallingPhoneNumber(ctx context.Context, phoneNumber float32, params *GetInternationalCallingPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInternationalCallingPhoneNumberRequest(c.Server, phoneNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMsteams(ctx context.Context, params *GetMsteamsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMsteamsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMsteamsSubDomainNumbers(ctx context.Context, subDomain string, params *GetMsteamsSubDomainNumbersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMsteamsSubDomainNumbersRequest(c.Server, subDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMsteamsSubDomainUsers(ctx context.Context, subDomain string, params *GetMsteamsSubDomainUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMsteamsSubDomainUsersRequest(c.Server, subDomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMsteamsSubDomainUsersWithBody(ctx context.Context, subDomain string, params *PostMsteamsSubDomainUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMsteamsSubDomainUsersRequestWithBody(c.Server, subDomain, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMsteamsSubDomainUsers(ctx context.Context, subDomain string, params *PostMsteamsSubDomainUsersParams, body PostMsteamsSubDomainUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMsteamsSubDomainUsersRequest(c.Server, subDomain, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMsteamsSubDomainUsersId(ctx context.Context, subDomain string, id string, params *DeleteMsteamsSubDomainUsersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMsteamsSubDomainUsersIdRequest(c.Server, subDomain, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMsteamsSubDomainUsersId(ctx context.Context, subDomain string, id string, params *GetMsteamsSubDomainUsersIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMsteamsSubDomainUsersIdRequest(c.Server, subDomain, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMsteamsSubDomainUsersIdWithBody(ctx context.Context, subDomain string, id string, params *PutMsteamsSubDomainUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMsteamsSubDomainUsersIdRequestWithBody(c.Server, subDomain, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMsteamsSubDomainUsersId(ctx context.Context, subDomain string, id string, params *PutMsteamsSubDomainUsersIdParams, body PutMsteamsSubDomainUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMsteamsSubDomainUsersIdRequest(c.Server, subDomain, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMsteamsSubdomainCarriers(ctx context.Context, subdomain string, params *GetMsteamsSubdomainCarriersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMsteamsSubdomainCarriersRequest(c.Server, subdomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMsteamsSubdomainCarriersIdNumbers(ctx context.Context, subdomain string, id string, params *GetMsteamsSubdomainCarriersIdNumbersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMsteamsSubdomainCarriersIdNumbersRequest(c.Server, subdomain, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMsteamsSubdomainCarriersIdNumbersWithBody(ctx context.Context, subdomain string, id string, params *PostMsteamsSubdomainCarriersIdNumbersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMsteamsSubdomainCarriersIdNumbersRequestWithBody(c.Server, subdomain, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMsteamsSubdomainCarriersIdNumbers(ctx context.Context, subdomain string, id string, params *PostMsteamsSubdomainCarriersIdNumbersParams, body PostMsteamsSubdomainCarriersIdNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMsteamsSubdomainCarriersIdNumbersRequest(c.Server, subdomain, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMsteamsSubdomainEmergencyAddresses(ctx context.Context, subdomain string, params *GetMsteamsSubdomainEmergencyAddressesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMsteamsSubdomainEmergencyAddressesRequest(c.Server, subdomain, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMsteamsSubdomainEmergencyAddressesWithBody(ctx context.Context, subdomain string, params *PostMsteamsSubdomainEmergencyAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMsteamsSubdomainEmergencyAddressesRequestWithBody(c.Server, subdomain, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMsteamsSubdomainEmergencyAddresses(ctx context.Context, subdomain string, params *PostMsteamsSubdomainEmergencyAddressesParams, body PostMsteamsSubdomainEmergencyAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMsteamsSubdomainEmergencyAddressesRequest(c.Server, subdomain, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMsteamsSubdomainEmergencyAddressesId(ctx context.Context, subdomain string, id string, params *DeleteMsteamsSubdomainEmergencyAddressesIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMsteamsSubdomainEmergencyAddressesIdRequest(c.Server, subdomain, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMsteamsSubdomainEmergencyAddressesIdWithBody(ctx context.Context, subdomain string, id string, params *PutMsteamsSubdomainEmergencyAddressesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMsteamsSubdomainEmergencyAddressesIdRequestWithBody(c.Server, subdomain, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMsteamsSubdomainEmergencyAddressesId(ctx context.Context, subdomain string, id string, params *PutMsteamsSubdomainEmergencyAddressesIdParams, body PutMsteamsSubdomainEmergencyAddressesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMsteamsSubdomainEmergencyAddressesIdRequest(c.Server, subdomain, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2AuthorizeWithBody(ctx context.Context, params *PostOauth2AuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2AuthorizeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOauth2AuthorizeWithFormdataBody(ctx context.Context, params *PostOauth2AuthorizeParams, body PostOauth2AuthorizeFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOauth2AuthorizeRequestWithFormdataBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSite(ctx context.Context, params *GetSiteParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSiteRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSiteWithBody(ctx context.Context, params *PostSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSiteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSite(ctx context.Context, params *PostSiteParams, body PostSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSiteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSiteId(ctx context.Context, id string, params *DeleteSiteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSiteIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSiteId(ctx context.Context, id string, params *GetSiteIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSiteIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSiteIdWithBody(ctx context.Context, id string, params *PutSiteIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSiteIdRequestWithBody(c.Server, id, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutSiteId(ctx context.Context, id string, params *PutSiteIdParams, body PutSiteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutSiteIdRequest(c.Server, id, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoom(ctx context.Context, params *GetZoomParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoomRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZoomWithBody(ctx context.Context, params *PostZoomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZoomRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZoom(ctx context.Context, params *PostZoomParams, body PostZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZoomRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZoomProvisionToId(ctx context.Context, id string, params *GetZoomProvisionToIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZoomProvisionToIdRequest(c.Server, id, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAccountsRequest generates requests for GetAccounts
func NewGetAccountsRequest(server string, params *GetAccountsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Instance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instance", runtime.ParamLocationQuery, *params.Instance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetAccountsCustomersRequest generates requests for GetAccountsCustomers
func NewGetAccountsCustomersRequest(server string, params *GetAccountsCustomersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/customers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Instance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instance", runtime.ParamLocationQuery, *params.Instance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Filter != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "filter", runtime.ParamLocationQuery, *params.Filter); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CustomerLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerLimit", runtime.ParamLocationQuery, *params.CustomerLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetAccountsResellersRequest generates requests for GetAccountsResellers
func NewGetAccountsResellersRequest(server string, params *GetAccountsResellersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/resellers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Instance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instance", runtime.ParamLocationQuery, *params.Instance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostAccountsResellersRequest calls the generic PostAccountsResellers builder with application/json body
func NewPostAccountsResellersRequest(server string, params *PostAccountsResellersParams, body PostAccountsResellersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAccountsResellersRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostAccountsResellersRequestWithBody generates requests for PostAccountsResellers with any type of body
func NewPostAccountsResellersRequestWithBody(server string, params *PostAccountsResellersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/resellers")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Cookie != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam0)
		}

		if params.XApiKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteAccountsIdRequest generates requests for DeleteAccountsId
func NewDeleteAccountsIdRequest(server string, id string, params *DeleteAccountsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetAccountsIdRequest generates requests for GetAccountsId
func NewGetAccountsIdRequest(server string, id string, params *GetAccountsIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPutAccountsIdRequest calls the generic PutAccountsId builder with application/json body
func NewPutAccountsIdRequest(server string, id string, params *PutAccountsIdParams, body PutAccountsIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutAccountsIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutAccountsIdRequestWithBody generates requests for PutAccountsId with any type of body
func NewPutAccountsIdRequestWithBody(server string, id string, params *PutAccountsIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostCallForwardingCustomerIdRequest calls the generic PostCallForwardingCustomerId builder with application/json body
func NewPostCallForwardingCustomerIdRequest(server string, customerId int, params *PostCallForwardingCustomerIdParams, body PostCallForwardingCustomerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCallForwardingCustomerIdRequestWithBody(server, customerId, params, "application/json", bodyReader)
}

// NewPostCallForwardingCustomerIdRequestWithBody generates requests for PostCallForwardingCustomerId with any type of body
func NewPostCallForwardingCustomerIdRequestWithBody(server string, customerId int, params *PostCallForwardingCustomerIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/callForwarding/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Cookie != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam0)
		}

		if params.XApiKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam1)
		}

	}

	return req, nil
}

// NewPutCallForwardingCustomerIdRequest calls the generic PutCallForwardingCustomerId builder with application/json body
func NewPutCallForwardingCustomerIdRequest(server string, customerId int, params *PutCallForwardingCustomerIdParams, body PutCallForwardingCustomerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutCallForwardingCustomerIdRequestWithBody(server, customerId, params, "application/json", bodyReader)
}

// NewPutCallForwardingCustomerIdRequestWithBody generates requests for PutCallForwardingCustomerId with any type of body
func NewPutCallForwardingCustomerIdRequestWithBody(server string, customerId int, params *PutCallForwardingCustomerIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/callForwarding/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetCallForwardingCustomerIdPhoneNumberRequest generates requests for GetCallForwardingCustomerIdPhoneNumber
func NewGetCallForwardingCustomerIdPhoneNumberRequest(server string, customerId int, phoneNumber float32, params *GetCallForwardingCustomerIdPhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "phoneNumber", runtime.ParamLocationPath, phoneNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/callForwarding/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteCallForwardingIdRequest generates requests for DeleteCallForwardingId
func NewDeleteCallForwardingIdRequest(server string, id string, params *DeleteCallForwardingIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/callForwarding/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostCallingPartyNumberCustomerIdRequest calls the generic PostCallingPartyNumberCustomerId builder with application/json body
func NewPostCallingPartyNumberCustomerIdRequest(server string, customerId int, params *PostCallingPartyNumberCustomerIdParams, body PostCallingPartyNumberCustomerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCallingPartyNumberCustomerIdRequestWithBody(server, customerId, params, "application/json", bodyReader)
}

// NewPostCallingPartyNumberCustomerIdRequestWithBody generates requests for PostCallingPartyNumberCustomerId with any type of body
func NewPostCallingPartyNumberCustomerIdRequestWithBody(server string, customerId int, params *PostCallingPartyNumberCustomerIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/callingPartyNumber/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Cookie != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam0)
		}

		if params.XApiKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteCallingPartyNumberPhoneNumberRequest generates requests for DeleteCallingPartyNumberPhoneNumber
func NewDeleteCallingPartyNumberPhoneNumberRequest(server string, phoneNumber string, params *DeleteCallingPartyNumberPhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "phoneNumber", runtime.ParamLocationPath, phoneNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/callingPartyNumber/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetCallingPartyNumberPhoneNumberRequest generates requests for GetCallingPartyNumberPhoneNumber
func NewGetCallingPartyNumberPhoneNumberRequest(server string, phoneNumber float32, params *GetCallingPartyNumberPhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "phoneNumber", runtime.ParamLocationPath, phoneNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/callingPartyNumber/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostCnamCustomerIdRequest calls the generic PostCnamCustomerId builder with application/json body
func NewPostCnamCustomerIdRequest(server string, customerId int, params *PostCnamCustomerIdParams, body PostCnamCustomerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostCnamCustomerIdRequestWithBody(server, customerId, params, "application/json", bodyReader)
}

// NewPostCnamCustomerIdRequestWithBody generates requests for PostCnamCustomerId with any type of body
func NewPostCnamCustomerIdRequestWithBody(server string, customerId int, params *PostCnamCustomerIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cnam/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Cookie != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam0)
		}

		if params.XApiKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteCnamPhoneNumberRequest generates requests for DeleteCnamPhoneNumber
func NewDeleteCnamPhoneNumberRequest(server string, phoneNumber string, params *DeleteCnamPhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "phoneNumber", runtime.ParamLocationPath, phoneNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cnam/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetCnamPhoneNumberRequest generates requests for GetCnamPhoneNumber
func NewGetCnamPhoneNumberRequest(server string, phoneNumber float32, params *GetCnamPhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "phoneNumber", runtime.ParamLocationPath, phoneNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/cnam/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteDisasterPlanCustomerIdRequest generates requests for DeleteDisasterPlanCustomerId
func NewDeleteDisasterPlanCustomerIdRequest(server string, customerId int, params *DeleteDisasterPlanCustomerIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disasterPlan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetDisasterPlanCustomerIdRequest generates requests for GetDisasterPlanCustomerId
func NewGetDisasterPlanCustomerIdRequest(server string, customerId int, params *GetDisasterPlanCustomerIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disasterPlan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostDisasterPlanCustomerIdRequest calls the generic PostDisasterPlanCustomerId builder with application/json body
func NewPostDisasterPlanCustomerIdRequest(server string, customerId int, params *PostDisasterPlanCustomerIdParams, body PostDisasterPlanCustomerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDisasterPlanCustomerIdRequestWithBody(server, customerId, params, "application/json", bodyReader)
}

// NewPostDisasterPlanCustomerIdRequestWithBody generates requests for PostDisasterPlanCustomerId with any type of body
func NewPostDisasterPlanCustomerIdRequestWithBody(server string, customerId int, params *PostDisasterPlanCustomerIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disasterPlan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Cookie != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam0)
		}

		if params.XApiKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam1)
		}

	}

	return req, nil
}

// NewPutDisasterPlanCustomerIdRequest calls the generic PutDisasterPlanCustomerId builder with application/json body
func NewPutDisasterPlanCustomerIdRequest(server string, customerId int, params *PutDisasterPlanCustomerIdParams, body PutDisasterPlanCustomerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutDisasterPlanCustomerIdRequestWithBody(server, customerId, params, "application/json", bodyReader)
}

// NewPutDisasterPlanCustomerIdRequestWithBody generates requests for PutDisasterPlanCustomerId with any type of body
func NewPutDisasterPlanCustomerIdRequestWithBody(server string, customerId int, params *PutDisasterPlanCustomerIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/disasterPlan/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostInternationalCallingCustomerIdRequest calls the generic PostInternationalCallingCustomerId builder with application/json body
func NewPostInternationalCallingCustomerIdRequest(server string, customerId int, params *PostInternationalCallingCustomerIdParams, body PostInternationalCallingCustomerIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostInternationalCallingCustomerIdRequestWithBody(server, customerId, params, "application/json", bodyReader)
}

// NewPostInternationalCallingCustomerIdRequestWithBody generates requests for PostInternationalCallingCustomerId with any type of body
func NewPostInternationalCallingCustomerIdRequestWithBody(server string, customerId int, params *PostInternationalCallingCustomerIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "customerId", runtime.ParamLocationPath, customerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internationalCalling/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Cookie != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam0)
		}

		if params.XApiKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteInternationalCallingPhoneNumberRequest generates requests for DeleteInternationalCallingPhoneNumber
func NewDeleteInternationalCallingPhoneNumberRequest(server string, phoneNumber string, params *DeleteInternationalCallingPhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "phoneNumber", runtime.ParamLocationPath, phoneNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internationalCalling/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetInternationalCallingPhoneNumberRequest generates requests for GetInternationalCallingPhoneNumber
func NewGetInternationalCallingPhoneNumberRequest(server string, phoneNumber float32, params *GetInternationalCallingPhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "phoneNumber", runtime.ParamLocationPath, phoneNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/internationalCalling/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetMsteamsRequest generates requests for GetMsteams
func NewGetMsteamsRequest(server string, params *GetMsteamsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetMsteamsSubDomainNumbersRequest generates requests for GetMsteamsSubDomainNumbers
func NewGetMsteamsSubDomainNumbersRequest(server string, subDomain string, params *GetMsteamsSubDomainNumbersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subDomain", runtime.ParamLocationPath, subDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/numbers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TelephoneNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "telephoneNumber", runtime.ParamLocationQuery, *params.TelephoneNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Upn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upn", runtime.ParamLocationQuery, *params.Upn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetMsteamsSubDomainUsersRequest generates requests for GetMsteamsSubDomainUsers
func NewGetMsteamsSubDomainUsersRequest(server string, subDomain string, params *GetMsteamsSubDomainUsersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subDomain", runtime.ParamLocationPath, subDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TelephoneNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "telephoneNumber", runtime.ParamLocationQuery, *params.TelephoneNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Note != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "note", runtime.ParamLocationQuery, *params.Note); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Status != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "status", runtime.ParamLocationQuery, *params.Status); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FirstName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "firstName", runtime.ParamLocationQuery, *params.FirstName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.LastName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "lastName", runtime.ParamLocationQuery, *params.LastName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Upn != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "upn", runtime.ParamLocationQuery, *params.Upn); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostMsteamsSubDomainUsersRequest calls the generic PostMsteamsSubDomainUsers builder with application/json body
func NewPostMsteamsSubDomainUsersRequest(server string, subDomain string, params *PostMsteamsSubDomainUsersParams, body PostMsteamsSubDomainUsersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMsteamsSubDomainUsersRequestWithBody(server, subDomain, params, "application/json", bodyReader)
}

// NewPostMsteamsSubDomainUsersRequestWithBody generates requests for PostMsteamsSubDomainUsers with any type of body
func NewPostMsteamsSubDomainUsersRequestWithBody(server string, subDomain string, params *PostMsteamsSubDomainUsersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subDomain", runtime.ParamLocationPath, subDomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/users", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Cookie != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam0)
		}

		if params.XApiKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteMsteamsSubDomainUsersIdRequest generates requests for DeleteMsteamsSubDomainUsersId
func NewDeleteMsteamsSubDomainUsersIdRequest(server string, subDomain string, id string, params *DeleteMsteamsSubDomainUsersIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subDomain", runtime.ParamLocationPath, subDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetMsteamsSubDomainUsersIdRequest generates requests for GetMsteamsSubDomainUsersId
func NewGetMsteamsSubDomainUsersIdRequest(server string, subDomain string, id string, params *GetMsteamsSubDomainUsersIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subDomain", runtime.ParamLocationPath, subDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPutMsteamsSubDomainUsersIdRequest calls the generic PutMsteamsSubDomainUsersId builder with application/json body
func NewPutMsteamsSubDomainUsersIdRequest(server string, subDomain string, id string, params *PutMsteamsSubDomainUsersIdParams, body PutMsteamsSubDomainUsersIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMsteamsSubDomainUsersIdRequestWithBody(server, subDomain, id, params, "application/json", bodyReader)
}

// NewPutMsteamsSubDomainUsersIdRequestWithBody generates requests for PutMsteamsSubDomainUsersId with any type of body
func NewPutMsteamsSubDomainUsersIdRequestWithBody(server string, subDomain string, id string, params *PutMsteamsSubDomainUsersIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subDomain", runtime.ParamLocationPath, subDomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/users/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetMsteamsSubdomainCarriersRequest generates requests for GetMsteamsSubdomainCarriers
func NewGetMsteamsSubdomainCarriersRequest(server string, subdomain string, params *GetMsteamsSubdomainCarriersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subdomain", runtime.ParamLocationPath, subdomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/carriers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Instance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instance", runtime.ParamLocationQuery, *params.Instance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerId", runtime.ParamLocationQuery, params.CustomerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

	}

	return req, nil
}

// NewGetMsteamsSubdomainCarriersIdNumbersRequest generates requests for GetMsteamsSubdomainCarriersIdNumbers
func NewGetMsteamsSubdomainCarriersIdNumbersRequest(server string, subdomain string, id string, params *GetMsteamsSubdomainCarriersIdNumbersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subdomain", runtime.ParamLocationPath, subdomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/carriers/%s/numbers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Instance != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "instance", runtime.ParamLocationQuery, *params.Instance); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "customerId", runtime.ParamLocationQuery, params.CustomerId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostMsteamsSubdomainCarriersIdNumbersRequest calls the generic PostMsteamsSubdomainCarriersIdNumbers builder with application/json body
func NewPostMsteamsSubdomainCarriersIdNumbersRequest(server string, subdomain string, id string, params *PostMsteamsSubdomainCarriersIdNumbersParams, body PostMsteamsSubdomainCarriersIdNumbersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMsteamsSubdomainCarriersIdNumbersRequestWithBody(server, subdomain, id, params, "application/json", bodyReader)
}

// NewPostMsteamsSubdomainCarriersIdNumbersRequestWithBody generates requests for PostMsteamsSubdomainCarriersIdNumbers with any type of body
func NewPostMsteamsSubdomainCarriersIdNumbersRequestWithBody(server string, subdomain string, id string, params *PostMsteamsSubdomainCarriersIdNumbersParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subdomain", runtime.ParamLocationPath, subdomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/carriers/%s/numbers", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetMsteamsSubdomainEmergencyAddressesRequest generates requests for GetMsteamsSubdomainEmergencyAddresses
func NewGetMsteamsSubdomainEmergencyAddressesRequest(server string, subdomain string, params *GetMsteamsSubdomainEmergencyAddressesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subdomain", runtime.ParamLocationPath, subdomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/emergency/addresses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostMsteamsSubdomainEmergencyAddressesRequest calls the generic PostMsteamsSubdomainEmergencyAddresses builder with application/json body
func NewPostMsteamsSubdomainEmergencyAddressesRequest(server string, subdomain string, params *PostMsteamsSubdomainEmergencyAddressesParams, body PostMsteamsSubdomainEmergencyAddressesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostMsteamsSubdomainEmergencyAddressesRequestWithBody(server, subdomain, params, "application/json", bodyReader)
}

// NewPostMsteamsSubdomainEmergencyAddressesRequestWithBody generates requests for PostMsteamsSubdomainEmergencyAddresses with any type of body
func NewPostMsteamsSubdomainEmergencyAddressesRequestWithBody(server string, subdomain string, params *PostMsteamsSubdomainEmergencyAddressesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subdomain", runtime.ParamLocationPath, subdomain)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/emergency/addresses", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteMsteamsSubdomainEmergencyAddressesIdRequest generates requests for DeleteMsteamsSubdomainEmergencyAddressesId
func NewDeleteMsteamsSubdomainEmergencyAddressesIdRequest(server string, subdomain string, id string, params *DeleteMsteamsSubdomainEmergencyAddressesIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subdomain", runtime.ParamLocationPath, subdomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/emergency/addresses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPutMsteamsSubdomainEmergencyAddressesIdRequest calls the generic PutMsteamsSubdomainEmergencyAddressesId builder with application/json body
func NewPutMsteamsSubdomainEmergencyAddressesIdRequest(server string, subdomain string, id string, params *PutMsteamsSubdomainEmergencyAddressesIdParams, body PutMsteamsSubdomainEmergencyAddressesIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMsteamsSubdomainEmergencyAddressesIdRequestWithBody(server, subdomain, id, params, "application/json", bodyReader)
}

// NewPutMsteamsSubdomainEmergencyAddressesIdRequestWithBody generates requests for PutMsteamsSubdomainEmergencyAddressesId with any type of body
func NewPutMsteamsSubdomainEmergencyAddressesIdRequestWithBody(server string, subdomain string, id string, params *PutMsteamsSubdomainEmergencyAddressesIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "subdomain", runtime.ParamLocationPath, subdomain)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/msteams/%s/emergency/addresses/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostOauth2AuthorizeRequestWithFormdataBody calls the generic PostOauth2Authorize builder with application/x-www-form-urlencoded body
func NewPostOauth2AuthorizeRequestWithFormdataBody(server string, params *PostOauth2AuthorizeParams, body PostOauth2AuthorizeFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostOauth2AuthorizeRequestWithBody(server, params, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostOauth2AuthorizeRequestWithBody generates requests for PostOauth2Authorize with any type of body
func NewPostOauth2AuthorizeRequestWithBody(server string, params *PostOauth2AuthorizeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/oauth2/authorize")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Cookie != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam0)
		}

	}

	return req, nil
}

// NewGetSiteRequest generates requests for GetSite
func NewGetSiteRequest(server string, params *GetSiteParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/site")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SiteLimit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "siteLimit", runtime.ParamLocationQuery, *params.SiteLimit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostSiteRequest calls the generic PostSite builder with application/json body
func NewPostSiteRequest(server string, params *PostSiteParams, body PostSiteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostSiteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostSiteRequestWithBody generates requests for PostSite with any type of body
func NewPostSiteRequestWithBody(server string, params *PostSiteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/site")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Cookie != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam0)
		}

		if params.XApiKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam1)
		}

	}

	return req, nil
}

// NewDeleteSiteIdRequest generates requests for DeleteSiteId
func NewDeleteSiteIdRequest(server string, id string, params *DeleteSiteIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/site/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetSiteIdRequest generates requests for GetSiteId
func NewGetSiteIdRequest(server string, id string, params *GetSiteIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/site/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPutSiteIdRequest calls the generic PutSiteId builder with application/json body
func NewPutSiteIdRequest(server string, id string, params *PutSiteIdParams, body PutSiteIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutSiteIdRequestWithBody(server, id, params, "application/json", bodyReader)
}

// NewPutSiteIdRequestWithBody generates requests for PutSiteId with any type of body
func NewPutSiteIdRequestWithBody(server string, id string, params *PutSiteIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/site/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewGetZoomRequest generates requests for GetZoom
func NewGetZoomRequest(server string, params *GetZoomParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zoom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

// NewPostZoomRequest calls the generic PostZoom builder with application/json body
func NewPostZoomRequest(server string, params *PostZoomParams, body PostZoomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostZoomRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostZoomRequestWithBody generates requests for PostZoom with any type of body
func NewPostZoomRequestWithBody(server string, params *PostZoomParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zoom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Cookie != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam0)
		}

		if params.XApiKey != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam1)
		}

	}

	return req, nil
}

// NewGetZoomProvisionToIdRequest generates requests for GetZoomProvisionToId
func NewGetZoomProvisionToIdRequest(server string, id string, params *GetZoomProvisionToIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zoom/provisionTo/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XApiKey != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-api-key", runtime.ParamLocationHeader, *params.XApiKey)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-api-key", headerParam0)
		}

		if params.Cookie != nil {
			var headerParam1 string

			headerParam1, err = runtime.StyleParamWithLocation("simple", false, "Cookie", runtime.ParamLocationHeader, *params.Cookie)
			if err != nil {
				return nil, err
			}

			req.Header.Set("Cookie", headerParam1)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAccountsWithResponse request
	GetAccountsWithResponse(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error)

	// GetAccountsCustomersWithResponse request
	GetAccountsCustomersWithResponse(ctx context.Context, params *GetAccountsCustomersParams, reqEditors ...RequestEditorFn) (*GetAccountsCustomersResponse, error)

	// GetAccountsResellersWithResponse request
	GetAccountsResellersWithResponse(ctx context.Context, params *GetAccountsResellersParams, reqEditors ...RequestEditorFn) (*GetAccountsResellersResponse, error)

	// PostAccountsResellersWithBodyWithResponse request with any body
	PostAccountsResellersWithBodyWithResponse(ctx context.Context, params *PostAccountsResellersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsResellersResponse, error)

	PostAccountsResellersWithResponse(ctx context.Context, params *PostAccountsResellersParams, body PostAccountsResellersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsResellersResponse, error)

	// DeleteAccountsIdWithResponse request
	DeleteAccountsIdWithResponse(ctx context.Context, id string, params *DeleteAccountsIdParams, reqEditors ...RequestEditorFn) (*DeleteAccountsIdResponse, error)

	// GetAccountsIdWithResponse request
	GetAccountsIdWithResponse(ctx context.Context, id string, params *GetAccountsIdParams, reqEditors ...RequestEditorFn) (*GetAccountsIdResponse, error)

	// PutAccountsIdWithBodyWithResponse request with any body
	PutAccountsIdWithBodyWithResponse(ctx context.Context, id string, params *PutAccountsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccountsIdResponse, error)

	PutAccountsIdWithResponse(ctx context.Context, id string, params *PutAccountsIdParams, body PutAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccountsIdResponse, error)

	// PostCallForwardingCustomerIdWithBodyWithResponse request with any body
	PostCallForwardingCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PostCallForwardingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallForwardingCustomerIdResponse, error)

	PostCallForwardingCustomerIdWithResponse(ctx context.Context, customerId int, params *PostCallForwardingCustomerIdParams, body PostCallForwardingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallForwardingCustomerIdResponse, error)

	// PutCallForwardingCustomerIdWithBodyWithResponse request with any body
	PutCallForwardingCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PutCallForwardingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCallForwardingCustomerIdResponse, error)

	PutCallForwardingCustomerIdWithResponse(ctx context.Context, customerId int, params *PutCallForwardingCustomerIdParams, body PutCallForwardingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCallForwardingCustomerIdResponse, error)

	// GetCallForwardingCustomerIdPhoneNumberWithResponse request
	GetCallForwardingCustomerIdPhoneNumberWithResponse(ctx context.Context, customerId int, phoneNumber float32, params *GetCallForwardingCustomerIdPhoneNumberParams, reqEditors ...RequestEditorFn) (*GetCallForwardingCustomerIdPhoneNumberResponse, error)

	// DeleteCallForwardingIdWithResponse request
	DeleteCallForwardingIdWithResponse(ctx context.Context, id string, params *DeleteCallForwardingIdParams, reqEditors ...RequestEditorFn) (*DeleteCallForwardingIdResponse, error)

	// PostCallingPartyNumberCustomerIdWithBodyWithResponse request with any body
	PostCallingPartyNumberCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PostCallingPartyNumberCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallingPartyNumberCustomerIdResponse, error)

	PostCallingPartyNumberCustomerIdWithResponse(ctx context.Context, customerId int, params *PostCallingPartyNumberCustomerIdParams, body PostCallingPartyNumberCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallingPartyNumberCustomerIdResponse, error)

	// DeleteCallingPartyNumberPhoneNumberWithResponse request
	DeleteCallingPartyNumberPhoneNumberWithResponse(ctx context.Context, phoneNumber string, params *DeleteCallingPartyNumberPhoneNumberParams, reqEditors ...RequestEditorFn) (*DeleteCallingPartyNumberPhoneNumberResponse, error)

	// GetCallingPartyNumberPhoneNumberWithResponse request
	GetCallingPartyNumberPhoneNumberWithResponse(ctx context.Context, phoneNumber float32, params *GetCallingPartyNumberPhoneNumberParams, reqEditors ...RequestEditorFn) (*GetCallingPartyNumberPhoneNumberResponse, error)

	// PostCnamCustomerIdWithBodyWithResponse request with any body
	PostCnamCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PostCnamCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCnamCustomerIdResponse, error)

	PostCnamCustomerIdWithResponse(ctx context.Context, customerId int, params *PostCnamCustomerIdParams, body PostCnamCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCnamCustomerIdResponse, error)

	// DeleteCnamPhoneNumberWithResponse request
	DeleteCnamPhoneNumberWithResponse(ctx context.Context, phoneNumber string, params *DeleteCnamPhoneNumberParams, reqEditors ...RequestEditorFn) (*DeleteCnamPhoneNumberResponse, error)

	// GetCnamPhoneNumberWithResponse request
	GetCnamPhoneNumberWithResponse(ctx context.Context, phoneNumber float32, params *GetCnamPhoneNumberParams, reqEditors ...RequestEditorFn) (*GetCnamPhoneNumberResponse, error)

	// DeleteDisasterPlanCustomerIdWithResponse request
	DeleteDisasterPlanCustomerIdWithResponse(ctx context.Context, customerId int, params *DeleteDisasterPlanCustomerIdParams, reqEditors ...RequestEditorFn) (*DeleteDisasterPlanCustomerIdResponse, error)

	// GetDisasterPlanCustomerIdWithResponse request
	GetDisasterPlanCustomerIdWithResponse(ctx context.Context, customerId int, params *GetDisasterPlanCustomerIdParams, reqEditors ...RequestEditorFn) (*GetDisasterPlanCustomerIdResponse, error)

	// PostDisasterPlanCustomerIdWithBodyWithResponse request with any body
	PostDisasterPlanCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PostDisasterPlanCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDisasterPlanCustomerIdResponse, error)

	PostDisasterPlanCustomerIdWithResponse(ctx context.Context, customerId int, params *PostDisasterPlanCustomerIdParams, body PostDisasterPlanCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDisasterPlanCustomerIdResponse, error)

	// PutDisasterPlanCustomerIdWithBodyWithResponse request with any body
	PutDisasterPlanCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PutDisasterPlanCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDisasterPlanCustomerIdResponse, error)

	PutDisasterPlanCustomerIdWithResponse(ctx context.Context, customerId int, params *PutDisasterPlanCustomerIdParams, body PutDisasterPlanCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDisasterPlanCustomerIdResponse, error)

	// PostInternationalCallingCustomerIdWithBodyWithResponse request with any body
	PostInternationalCallingCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PostInternationalCallingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInternationalCallingCustomerIdResponse, error)

	PostInternationalCallingCustomerIdWithResponse(ctx context.Context, customerId int, params *PostInternationalCallingCustomerIdParams, body PostInternationalCallingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInternationalCallingCustomerIdResponse, error)

	// DeleteInternationalCallingPhoneNumberWithResponse request
	DeleteInternationalCallingPhoneNumberWithResponse(ctx context.Context, phoneNumber string, params *DeleteInternationalCallingPhoneNumberParams, reqEditors ...RequestEditorFn) (*DeleteInternationalCallingPhoneNumberResponse, error)

	// GetInternationalCallingPhoneNumberWithResponse request
	GetInternationalCallingPhoneNumberWithResponse(ctx context.Context, phoneNumber float32, params *GetInternationalCallingPhoneNumberParams, reqEditors ...RequestEditorFn) (*GetInternationalCallingPhoneNumberResponse, error)

	// GetMsteamsWithResponse request
	GetMsteamsWithResponse(ctx context.Context, params *GetMsteamsParams, reqEditors ...RequestEditorFn) (*GetMsteamsResponse, error)

	// GetMsteamsSubDomainNumbersWithResponse request
	GetMsteamsSubDomainNumbersWithResponse(ctx context.Context, subDomain string, params *GetMsteamsSubDomainNumbersParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubDomainNumbersResponse, error)

	// GetMsteamsSubDomainUsersWithResponse request
	GetMsteamsSubDomainUsersWithResponse(ctx context.Context, subDomain string, params *GetMsteamsSubDomainUsersParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubDomainUsersResponse, error)

	// PostMsteamsSubDomainUsersWithBodyWithResponse request with any body
	PostMsteamsSubDomainUsersWithBodyWithResponse(ctx context.Context, subDomain string, params *PostMsteamsSubDomainUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMsteamsSubDomainUsersResponse, error)

	PostMsteamsSubDomainUsersWithResponse(ctx context.Context, subDomain string, params *PostMsteamsSubDomainUsersParams, body PostMsteamsSubDomainUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMsteamsSubDomainUsersResponse, error)

	// DeleteMsteamsSubDomainUsersIdWithResponse request
	DeleteMsteamsSubDomainUsersIdWithResponse(ctx context.Context, subDomain string, id string, params *DeleteMsteamsSubDomainUsersIdParams, reqEditors ...RequestEditorFn) (*DeleteMsteamsSubDomainUsersIdResponse, error)

	// GetMsteamsSubDomainUsersIdWithResponse request
	GetMsteamsSubDomainUsersIdWithResponse(ctx context.Context, subDomain string, id string, params *GetMsteamsSubDomainUsersIdParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubDomainUsersIdResponse, error)

	// PutMsteamsSubDomainUsersIdWithBodyWithResponse request with any body
	PutMsteamsSubDomainUsersIdWithBodyWithResponse(ctx context.Context, subDomain string, id string, params *PutMsteamsSubDomainUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMsteamsSubDomainUsersIdResponse, error)

	PutMsteamsSubDomainUsersIdWithResponse(ctx context.Context, subDomain string, id string, params *PutMsteamsSubDomainUsersIdParams, body PutMsteamsSubDomainUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMsteamsSubDomainUsersIdResponse, error)

	// GetMsteamsSubdomainCarriersWithResponse request
	GetMsteamsSubdomainCarriersWithResponse(ctx context.Context, subdomain string, params *GetMsteamsSubdomainCarriersParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubdomainCarriersResponse, error)

	// GetMsteamsSubdomainCarriersIdNumbersWithResponse request
	GetMsteamsSubdomainCarriersIdNumbersWithResponse(ctx context.Context, subdomain string, id string, params *GetMsteamsSubdomainCarriersIdNumbersParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubdomainCarriersIdNumbersResponse, error)

	// PostMsteamsSubdomainCarriersIdNumbersWithBodyWithResponse request with any body
	PostMsteamsSubdomainCarriersIdNumbersWithBodyWithResponse(ctx context.Context, subdomain string, id string, params *PostMsteamsSubdomainCarriersIdNumbersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMsteamsSubdomainCarriersIdNumbersResponse, error)

	PostMsteamsSubdomainCarriersIdNumbersWithResponse(ctx context.Context, subdomain string, id string, params *PostMsteamsSubdomainCarriersIdNumbersParams, body PostMsteamsSubdomainCarriersIdNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMsteamsSubdomainCarriersIdNumbersResponse, error)

	// GetMsteamsSubdomainEmergencyAddressesWithResponse request
	GetMsteamsSubdomainEmergencyAddressesWithResponse(ctx context.Context, subdomain string, params *GetMsteamsSubdomainEmergencyAddressesParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubdomainEmergencyAddressesResponse, error)

	// PostMsteamsSubdomainEmergencyAddressesWithBodyWithResponse request with any body
	PostMsteamsSubdomainEmergencyAddressesWithBodyWithResponse(ctx context.Context, subdomain string, params *PostMsteamsSubdomainEmergencyAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMsteamsSubdomainEmergencyAddressesResponse, error)

	PostMsteamsSubdomainEmergencyAddressesWithResponse(ctx context.Context, subdomain string, params *PostMsteamsSubdomainEmergencyAddressesParams, body PostMsteamsSubdomainEmergencyAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMsteamsSubdomainEmergencyAddressesResponse, error)

	// DeleteMsteamsSubdomainEmergencyAddressesIdWithResponse request
	DeleteMsteamsSubdomainEmergencyAddressesIdWithResponse(ctx context.Context, subdomain string, id string, params *DeleteMsteamsSubdomainEmergencyAddressesIdParams, reqEditors ...RequestEditorFn) (*DeleteMsteamsSubdomainEmergencyAddressesIdResponse, error)

	// PutMsteamsSubdomainEmergencyAddressesIdWithBodyWithResponse request with any body
	PutMsteamsSubdomainEmergencyAddressesIdWithBodyWithResponse(ctx context.Context, subdomain string, id string, params *PutMsteamsSubdomainEmergencyAddressesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMsteamsSubdomainEmergencyAddressesIdResponse, error)

	PutMsteamsSubdomainEmergencyAddressesIdWithResponse(ctx context.Context, subdomain string, id string, params *PutMsteamsSubdomainEmergencyAddressesIdParams, body PutMsteamsSubdomainEmergencyAddressesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMsteamsSubdomainEmergencyAddressesIdResponse, error)

	// PostOauth2AuthorizeWithBodyWithResponse request with any body
	PostOauth2AuthorizeWithBodyWithResponse(ctx context.Context, params *PostOauth2AuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2AuthorizeResponse, error)

	PostOauth2AuthorizeWithFormdataBodyWithResponse(ctx context.Context, params *PostOauth2AuthorizeParams, body PostOauth2AuthorizeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2AuthorizeResponse, error)

	// GetSiteWithResponse request
	GetSiteWithResponse(ctx context.Context, params *GetSiteParams, reqEditors ...RequestEditorFn) (*GetSiteResponse, error)

	// PostSiteWithBodyWithResponse request with any body
	PostSiteWithBodyWithResponse(ctx context.Context, params *PostSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSiteResponse, error)

	PostSiteWithResponse(ctx context.Context, params *PostSiteParams, body PostSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSiteResponse, error)

	// DeleteSiteIdWithResponse request
	DeleteSiteIdWithResponse(ctx context.Context, id string, params *DeleteSiteIdParams, reqEditors ...RequestEditorFn) (*DeleteSiteIdResponse, error)

	// GetSiteIdWithResponse request
	GetSiteIdWithResponse(ctx context.Context, id string, params *GetSiteIdParams, reqEditors ...RequestEditorFn) (*GetSiteIdResponse, error)

	// PutSiteIdWithBodyWithResponse request with any body
	PutSiteIdWithBodyWithResponse(ctx context.Context, id string, params *PutSiteIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSiteIdResponse, error)

	PutSiteIdWithResponse(ctx context.Context, id string, params *PutSiteIdParams, body PutSiteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSiteIdResponse, error)

	// GetZoomWithResponse request
	GetZoomWithResponse(ctx context.Context, params *GetZoomParams, reqEditors ...RequestEditorFn) (*GetZoomResponse, error)

	// PostZoomWithBodyWithResponse request with any body
	PostZoomWithBodyWithResponse(ctx context.Context, params *PostZoomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZoomResponse, error)

	PostZoomWithResponse(ctx context.Context, params *PostZoomParams, body PostZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*PostZoomResponse, error)

	// GetZoomProvisionToIdWithResponse request
	GetZoomProvisionToIdWithResponse(ctx context.Context, id string, params *GetZoomProvisionToIdParams, reqEditors ...RequestEditorFn) (*GetZoomProvisionToIdResponse, error)
}

type GetAccountsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountInfo
}

// Status returns HTTPResponse.Status
func (r GetAccountsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsCustomersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfAccountInfo
}

// Status returns HTTPResponse.Status
func (r GetAccountsCustomersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsCustomersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsResellersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfAccountInfo
}

// Status returns HTTPResponse.Status
func (r GetAccountsResellersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsResellersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAccountsResellersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostAccountsResellersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAccountsResellersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountInfo
}

// Status returns HTTPResponse.Status
func (r GetAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAccountsIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PutAccountsIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAccountsIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallForwardingCustomerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostCallForwardingCustomerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallForwardingCustomerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutCallForwardingCustomerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PutCallForwardingCustomerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutCallForwardingCustomerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallForwardingCustomerIdPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallForwardingInfo
}

// Status returns HTTPResponse.Status
func (r GetCallForwardingCustomerIdPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallForwardingCustomerIdPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallForwardingIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r DeleteCallForwardingIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallForwardingIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallingPartyNumberCustomerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostCallingPartyNumberCustomerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallingPartyNumberCustomerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallingPartyNumberPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r DeleteCallingPartyNumberPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallingPartyNumberPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCallingPartyNumberPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CallingPartyNumberInfo
}

// Status returns HTTPResponse.Status
func (r GetCallingPartyNumberPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCallingPartyNumberPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCnamCustomerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostCnamCustomerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCnamCustomerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCnamPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r DeleteCnamPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCnamPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetCnamPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CNAMInfo
}

// Status returns HTTPResponse.Status
func (r GetCnamPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetCnamPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDisasterPlanCustomerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r DeleteDisasterPlanCustomerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDisasterPlanCustomerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDisasterPlanCustomerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DisasterPlanInfo
}

// Status returns HTTPResponse.Status
func (r GetDisasterPlanCustomerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDisasterPlanCustomerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDisasterPlanCustomerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostDisasterPlanCustomerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDisasterPlanCustomerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutDisasterPlanCustomerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PutDisasterPlanCustomerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutDisasterPlanCustomerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostInternationalCallingCustomerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostInternationalCallingCustomerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostInternationalCallingCustomerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInternationalCallingPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r DeleteInternationalCallingPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInternationalCallingPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInternationalCallingPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *InternationalCallingInfo
}

// Status returns HTTPResponse.Status
func (r GetInternationalCallingPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInternationalCallingPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMsteamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetMsteamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMsteamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMsteamsSubDomainNumbersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfnumber
}

// Status returns HTTPResponse.Status
func (r GetMsteamsSubDomainNumbersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMsteamsSubDomainNumbersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMsteamsSubDomainUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfuser
}

// Status returns HTTPResponse.Status
func (r GetMsteamsSubDomainUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMsteamsSubDomainUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMsteamsSubDomainUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostMsteamsSubDomainUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMsteamsSubDomainUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMsteamsSubDomainUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMsteamsSubDomainUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMsteamsSubDomainUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMsteamsSubDomainUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetMsteamsSubDomainUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMsteamsSubDomainUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMsteamsSubDomainUsersIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PutMsteamsSubDomainUsersIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMsteamsSubDomainUsersIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMsteamsSubdomainCarriersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfCarrierInfo
}

// Status returns HTTPResponse.Status
func (r GetMsteamsSubdomainCarriersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMsteamsSubdomainCarriersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMsteamsSubdomainCarriersIdNumbersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountInfo
}

// Status returns HTTPResponse.Status
func (r GetMsteamsSubdomainCarriersIdNumbersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMsteamsSubdomainCarriersIdNumbersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMsteamsSubdomainCarriersIdNumbersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostMsteamsSubdomainCarriersIdNumbersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMsteamsSubdomainCarriersIdNumbersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMsteamsSubdomainEmergencyAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfEmergencyAddresses
}

// Status returns HTTPResponse.Status
func (r GetMsteamsSubdomainEmergencyAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMsteamsSubdomainEmergencyAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMsteamsSubdomainEmergencyAddressesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostMsteamsSubdomainEmergencyAddressesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMsteamsSubdomainEmergencyAddressesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMsteamsSubdomainEmergencyAddressesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r DeleteMsteamsSubdomainEmergencyAddressesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMsteamsSubdomainEmergencyAddressesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMsteamsSubdomainEmergencyAddressesIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PutMsteamsSubdomainEmergencyAddressesIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMsteamsSubdomainEmergencyAddressesIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOauth2AuthorizeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccessToken
}

// Status returns HTTPResponse.Status
func (r PostOauth2AuthorizeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOauth2AuthorizeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ArrayOfDepartmentInfo
}

// Status returns HTTPResponse.Status
func (r GetSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSiteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostSiteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSiteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSiteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSiteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSiteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSiteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *DepartmentInfo
}

// Status returns HTTPResponse.Status
func (r GetSiteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSiteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutSiteIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PutSiteIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutSiteIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetZoomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostZoomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Status
}

// Status returns HTTPResponse.Status
func (r PostZoomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostZoomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZoomProvisionToIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetZoomProvisionToIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZoomProvisionToIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAccountsWithResponse request returning *GetAccountsResponse
func (c *ClientWithResponses) GetAccountsWithResponse(ctx context.Context, params *GetAccountsParams, reqEditors ...RequestEditorFn) (*GetAccountsResponse, error) {
	rsp, err := c.GetAccounts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsResponse(rsp)
}

// GetAccountsCustomersWithResponse request returning *GetAccountsCustomersResponse
func (c *ClientWithResponses) GetAccountsCustomersWithResponse(ctx context.Context, params *GetAccountsCustomersParams, reqEditors ...RequestEditorFn) (*GetAccountsCustomersResponse, error) {
	rsp, err := c.GetAccountsCustomers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsCustomersResponse(rsp)
}

// GetAccountsResellersWithResponse request returning *GetAccountsResellersResponse
func (c *ClientWithResponses) GetAccountsResellersWithResponse(ctx context.Context, params *GetAccountsResellersParams, reqEditors ...RequestEditorFn) (*GetAccountsResellersResponse, error) {
	rsp, err := c.GetAccountsResellers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsResellersResponse(rsp)
}

// PostAccountsResellersWithBodyWithResponse request with arbitrary body returning *PostAccountsResellersResponse
func (c *ClientWithResponses) PostAccountsResellersWithBodyWithResponse(ctx context.Context, params *PostAccountsResellersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAccountsResellersResponse, error) {
	rsp, err := c.PostAccountsResellersWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsResellersResponse(rsp)
}

func (c *ClientWithResponses) PostAccountsResellersWithResponse(ctx context.Context, params *PostAccountsResellersParams, body PostAccountsResellersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAccountsResellersResponse, error) {
	rsp, err := c.PostAccountsResellers(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAccountsResellersResponse(rsp)
}

// DeleteAccountsIdWithResponse request returning *DeleteAccountsIdResponse
func (c *ClientWithResponses) DeleteAccountsIdWithResponse(ctx context.Context, id string, params *DeleteAccountsIdParams, reqEditors ...RequestEditorFn) (*DeleteAccountsIdResponse, error) {
	rsp, err := c.DeleteAccountsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAccountsIdResponse(rsp)
}

// GetAccountsIdWithResponse request returning *GetAccountsIdResponse
func (c *ClientWithResponses) GetAccountsIdWithResponse(ctx context.Context, id string, params *GetAccountsIdParams, reqEditors ...RequestEditorFn) (*GetAccountsIdResponse, error) {
	rsp, err := c.GetAccountsId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAccountsIdResponse(rsp)
}

// PutAccountsIdWithBodyWithResponse request with arbitrary body returning *PutAccountsIdResponse
func (c *ClientWithResponses) PutAccountsIdWithBodyWithResponse(ctx context.Context, id string, params *PutAccountsIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutAccountsIdResponse, error) {
	rsp, err := c.PutAccountsIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccountsIdResponse(rsp)
}

func (c *ClientWithResponses) PutAccountsIdWithResponse(ctx context.Context, id string, params *PutAccountsIdParams, body PutAccountsIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutAccountsIdResponse, error) {
	rsp, err := c.PutAccountsId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAccountsIdResponse(rsp)
}

// PostCallForwardingCustomerIdWithBodyWithResponse request with arbitrary body returning *PostCallForwardingCustomerIdResponse
func (c *ClientWithResponses) PostCallForwardingCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PostCallForwardingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallForwardingCustomerIdResponse, error) {
	rsp, err := c.PostCallForwardingCustomerIdWithBody(ctx, customerId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallForwardingCustomerIdResponse(rsp)
}

func (c *ClientWithResponses) PostCallForwardingCustomerIdWithResponse(ctx context.Context, customerId int, params *PostCallForwardingCustomerIdParams, body PostCallForwardingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallForwardingCustomerIdResponse, error) {
	rsp, err := c.PostCallForwardingCustomerId(ctx, customerId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallForwardingCustomerIdResponse(rsp)
}

// PutCallForwardingCustomerIdWithBodyWithResponse request with arbitrary body returning *PutCallForwardingCustomerIdResponse
func (c *ClientWithResponses) PutCallForwardingCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PutCallForwardingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutCallForwardingCustomerIdResponse, error) {
	rsp, err := c.PutCallForwardingCustomerIdWithBody(ctx, customerId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCallForwardingCustomerIdResponse(rsp)
}

func (c *ClientWithResponses) PutCallForwardingCustomerIdWithResponse(ctx context.Context, customerId int, params *PutCallForwardingCustomerIdParams, body PutCallForwardingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutCallForwardingCustomerIdResponse, error) {
	rsp, err := c.PutCallForwardingCustomerId(ctx, customerId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutCallForwardingCustomerIdResponse(rsp)
}

// GetCallForwardingCustomerIdPhoneNumberWithResponse request returning *GetCallForwardingCustomerIdPhoneNumberResponse
func (c *ClientWithResponses) GetCallForwardingCustomerIdPhoneNumberWithResponse(ctx context.Context, customerId int, phoneNumber float32, params *GetCallForwardingCustomerIdPhoneNumberParams, reqEditors ...RequestEditorFn) (*GetCallForwardingCustomerIdPhoneNumberResponse, error) {
	rsp, err := c.GetCallForwardingCustomerIdPhoneNumber(ctx, customerId, phoneNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallForwardingCustomerIdPhoneNumberResponse(rsp)
}

// DeleteCallForwardingIdWithResponse request returning *DeleteCallForwardingIdResponse
func (c *ClientWithResponses) DeleteCallForwardingIdWithResponse(ctx context.Context, id string, params *DeleteCallForwardingIdParams, reqEditors ...RequestEditorFn) (*DeleteCallForwardingIdResponse, error) {
	rsp, err := c.DeleteCallForwardingId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallForwardingIdResponse(rsp)
}

// PostCallingPartyNumberCustomerIdWithBodyWithResponse request with arbitrary body returning *PostCallingPartyNumberCustomerIdResponse
func (c *ClientWithResponses) PostCallingPartyNumberCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PostCallingPartyNumberCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCallingPartyNumberCustomerIdResponse, error) {
	rsp, err := c.PostCallingPartyNumberCustomerIdWithBody(ctx, customerId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallingPartyNumberCustomerIdResponse(rsp)
}

func (c *ClientWithResponses) PostCallingPartyNumberCustomerIdWithResponse(ctx context.Context, customerId int, params *PostCallingPartyNumberCustomerIdParams, body PostCallingPartyNumberCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCallingPartyNumberCustomerIdResponse, error) {
	rsp, err := c.PostCallingPartyNumberCustomerId(ctx, customerId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallingPartyNumberCustomerIdResponse(rsp)
}

// DeleteCallingPartyNumberPhoneNumberWithResponse request returning *DeleteCallingPartyNumberPhoneNumberResponse
func (c *ClientWithResponses) DeleteCallingPartyNumberPhoneNumberWithResponse(ctx context.Context, phoneNumber string, params *DeleteCallingPartyNumberPhoneNumberParams, reqEditors ...RequestEditorFn) (*DeleteCallingPartyNumberPhoneNumberResponse, error) {
	rsp, err := c.DeleteCallingPartyNumberPhoneNumber(ctx, phoneNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallingPartyNumberPhoneNumberResponse(rsp)
}

// GetCallingPartyNumberPhoneNumberWithResponse request returning *GetCallingPartyNumberPhoneNumberResponse
func (c *ClientWithResponses) GetCallingPartyNumberPhoneNumberWithResponse(ctx context.Context, phoneNumber float32, params *GetCallingPartyNumberPhoneNumberParams, reqEditors ...RequestEditorFn) (*GetCallingPartyNumberPhoneNumberResponse, error) {
	rsp, err := c.GetCallingPartyNumberPhoneNumber(ctx, phoneNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCallingPartyNumberPhoneNumberResponse(rsp)
}

// PostCnamCustomerIdWithBodyWithResponse request with arbitrary body returning *PostCnamCustomerIdResponse
func (c *ClientWithResponses) PostCnamCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PostCnamCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostCnamCustomerIdResponse, error) {
	rsp, err := c.PostCnamCustomerIdWithBody(ctx, customerId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCnamCustomerIdResponse(rsp)
}

func (c *ClientWithResponses) PostCnamCustomerIdWithResponse(ctx context.Context, customerId int, params *PostCnamCustomerIdParams, body PostCnamCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostCnamCustomerIdResponse, error) {
	rsp, err := c.PostCnamCustomerId(ctx, customerId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCnamCustomerIdResponse(rsp)
}

// DeleteCnamPhoneNumberWithResponse request returning *DeleteCnamPhoneNumberResponse
func (c *ClientWithResponses) DeleteCnamPhoneNumberWithResponse(ctx context.Context, phoneNumber string, params *DeleteCnamPhoneNumberParams, reqEditors ...RequestEditorFn) (*DeleteCnamPhoneNumberResponse, error) {
	rsp, err := c.DeleteCnamPhoneNumber(ctx, phoneNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCnamPhoneNumberResponse(rsp)
}

// GetCnamPhoneNumberWithResponse request returning *GetCnamPhoneNumberResponse
func (c *ClientWithResponses) GetCnamPhoneNumberWithResponse(ctx context.Context, phoneNumber float32, params *GetCnamPhoneNumberParams, reqEditors ...RequestEditorFn) (*GetCnamPhoneNumberResponse, error) {
	rsp, err := c.GetCnamPhoneNumber(ctx, phoneNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetCnamPhoneNumberResponse(rsp)
}

// DeleteDisasterPlanCustomerIdWithResponse request returning *DeleteDisasterPlanCustomerIdResponse
func (c *ClientWithResponses) DeleteDisasterPlanCustomerIdWithResponse(ctx context.Context, customerId int, params *DeleteDisasterPlanCustomerIdParams, reqEditors ...RequestEditorFn) (*DeleteDisasterPlanCustomerIdResponse, error) {
	rsp, err := c.DeleteDisasterPlanCustomerId(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDisasterPlanCustomerIdResponse(rsp)
}

// GetDisasterPlanCustomerIdWithResponse request returning *GetDisasterPlanCustomerIdResponse
func (c *ClientWithResponses) GetDisasterPlanCustomerIdWithResponse(ctx context.Context, customerId int, params *GetDisasterPlanCustomerIdParams, reqEditors ...RequestEditorFn) (*GetDisasterPlanCustomerIdResponse, error) {
	rsp, err := c.GetDisasterPlanCustomerId(ctx, customerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDisasterPlanCustomerIdResponse(rsp)
}

// PostDisasterPlanCustomerIdWithBodyWithResponse request with arbitrary body returning *PostDisasterPlanCustomerIdResponse
func (c *ClientWithResponses) PostDisasterPlanCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PostDisasterPlanCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDisasterPlanCustomerIdResponse, error) {
	rsp, err := c.PostDisasterPlanCustomerIdWithBody(ctx, customerId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDisasterPlanCustomerIdResponse(rsp)
}

func (c *ClientWithResponses) PostDisasterPlanCustomerIdWithResponse(ctx context.Context, customerId int, params *PostDisasterPlanCustomerIdParams, body PostDisasterPlanCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDisasterPlanCustomerIdResponse, error) {
	rsp, err := c.PostDisasterPlanCustomerId(ctx, customerId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDisasterPlanCustomerIdResponse(rsp)
}

// PutDisasterPlanCustomerIdWithBodyWithResponse request with arbitrary body returning *PutDisasterPlanCustomerIdResponse
func (c *ClientWithResponses) PutDisasterPlanCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PutDisasterPlanCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutDisasterPlanCustomerIdResponse, error) {
	rsp, err := c.PutDisasterPlanCustomerIdWithBody(ctx, customerId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDisasterPlanCustomerIdResponse(rsp)
}

func (c *ClientWithResponses) PutDisasterPlanCustomerIdWithResponse(ctx context.Context, customerId int, params *PutDisasterPlanCustomerIdParams, body PutDisasterPlanCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutDisasterPlanCustomerIdResponse, error) {
	rsp, err := c.PutDisasterPlanCustomerId(ctx, customerId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutDisasterPlanCustomerIdResponse(rsp)
}

// PostInternationalCallingCustomerIdWithBodyWithResponse request with arbitrary body returning *PostInternationalCallingCustomerIdResponse
func (c *ClientWithResponses) PostInternationalCallingCustomerIdWithBodyWithResponse(ctx context.Context, customerId int, params *PostInternationalCallingCustomerIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostInternationalCallingCustomerIdResponse, error) {
	rsp, err := c.PostInternationalCallingCustomerIdWithBody(ctx, customerId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInternationalCallingCustomerIdResponse(rsp)
}

func (c *ClientWithResponses) PostInternationalCallingCustomerIdWithResponse(ctx context.Context, customerId int, params *PostInternationalCallingCustomerIdParams, body PostInternationalCallingCustomerIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostInternationalCallingCustomerIdResponse, error) {
	rsp, err := c.PostInternationalCallingCustomerId(ctx, customerId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostInternationalCallingCustomerIdResponse(rsp)
}

// DeleteInternationalCallingPhoneNumberWithResponse request returning *DeleteInternationalCallingPhoneNumberResponse
func (c *ClientWithResponses) DeleteInternationalCallingPhoneNumberWithResponse(ctx context.Context, phoneNumber string, params *DeleteInternationalCallingPhoneNumberParams, reqEditors ...RequestEditorFn) (*DeleteInternationalCallingPhoneNumberResponse, error) {
	rsp, err := c.DeleteInternationalCallingPhoneNumber(ctx, phoneNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInternationalCallingPhoneNumberResponse(rsp)
}

// GetInternationalCallingPhoneNumberWithResponse request returning *GetInternationalCallingPhoneNumberResponse
func (c *ClientWithResponses) GetInternationalCallingPhoneNumberWithResponse(ctx context.Context, phoneNumber float32, params *GetInternationalCallingPhoneNumberParams, reqEditors ...RequestEditorFn) (*GetInternationalCallingPhoneNumberResponse, error) {
	rsp, err := c.GetInternationalCallingPhoneNumber(ctx, phoneNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInternationalCallingPhoneNumberResponse(rsp)
}

// GetMsteamsWithResponse request returning *GetMsteamsResponse
func (c *ClientWithResponses) GetMsteamsWithResponse(ctx context.Context, params *GetMsteamsParams, reqEditors ...RequestEditorFn) (*GetMsteamsResponse, error) {
	rsp, err := c.GetMsteams(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMsteamsResponse(rsp)
}

// GetMsteamsSubDomainNumbersWithResponse request returning *GetMsteamsSubDomainNumbersResponse
func (c *ClientWithResponses) GetMsteamsSubDomainNumbersWithResponse(ctx context.Context, subDomain string, params *GetMsteamsSubDomainNumbersParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubDomainNumbersResponse, error) {
	rsp, err := c.GetMsteamsSubDomainNumbers(ctx, subDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMsteamsSubDomainNumbersResponse(rsp)
}

// GetMsteamsSubDomainUsersWithResponse request returning *GetMsteamsSubDomainUsersResponse
func (c *ClientWithResponses) GetMsteamsSubDomainUsersWithResponse(ctx context.Context, subDomain string, params *GetMsteamsSubDomainUsersParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubDomainUsersResponse, error) {
	rsp, err := c.GetMsteamsSubDomainUsers(ctx, subDomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMsteamsSubDomainUsersResponse(rsp)
}

// PostMsteamsSubDomainUsersWithBodyWithResponse request with arbitrary body returning *PostMsteamsSubDomainUsersResponse
func (c *ClientWithResponses) PostMsteamsSubDomainUsersWithBodyWithResponse(ctx context.Context, subDomain string, params *PostMsteamsSubDomainUsersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMsteamsSubDomainUsersResponse, error) {
	rsp, err := c.PostMsteamsSubDomainUsersWithBody(ctx, subDomain, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMsteamsSubDomainUsersResponse(rsp)
}

func (c *ClientWithResponses) PostMsteamsSubDomainUsersWithResponse(ctx context.Context, subDomain string, params *PostMsteamsSubDomainUsersParams, body PostMsteamsSubDomainUsersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMsteamsSubDomainUsersResponse, error) {
	rsp, err := c.PostMsteamsSubDomainUsers(ctx, subDomain, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMsteamsSubDomainUsersResponse(rsp)
}

// DeleteMsteamsSubDomainUsersIdWithResponse request returning *DeleteMsteamsSubDomainUsersIdResponse
func (c *ClientWithResponses) DeleteMsteamsSubDomainUsersIdWithResponse(ctx context.Context, subDomain string, id string, params *DeleteMsteamsSubDomainUsersIdParams, reqEditors ...RequestEditorFn) (*DeleteMsteamsSubDomainUsersIdResponse, error) {
	rsp, err := c.DeleteMsteamsSubDomainUsersId(ctx, subDomain, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMsteamsSubDomainUsersIdResponse(rsp)
}

// GetMsteamsSubDomainUsersIdWithResponse request returning *GetMsteamsSubDomainUsersIdResponse
func (c *ClientWithResponses) GetMsteamsSubDomainUsersIdWithResponse(ctx context.Context, subDomain string, id string, params *GetMsteamsSubDomainUsersIdParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubDomainUsersIdResponse, error) {
	rsp, err := c.GetMsteamsSubDomainUsersId(ctx, subDomain, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMsteamsSubDomainUsersIdResponse(rsp)
}

// PutMsteamsSubDomainUsersIdWithBodyWithResponse request with arbitrary body returning *PutMsteamsSubDomainUsersIdResponse
func (c *ClientWithResponses) PutMsteamsSubDomainUsersIdWithBodyWithResponse(ctx context.Context, subDomain string, id string, params *PutMsteamsSubDomainUsersIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMsteamsSubDomainUsersIdResponse, error) {
	rsp, err := c.PutMsteamsSubDomainUsersIdWithBody(ctx, subDomain, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMsteamsSubDomainUsersIdResponse(rsp)
}

func (c *ClientWithResponses) PutMsteamsSubDomainUsersIdWithResponse(ctx context.Context, subDomain string, id string, params *PutMsteamsSubDomainUsersIdParams, body PutMsteamsSubDomainUsersIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMsteamsSubDomainUsersIdResponse, error) {
	rsp, err := c.PutMsteamsSubDomainUsersId(ctx, subDomain, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMsteamsSubDomainUsersIdResponse(rsp)
}

// GetMsteamsSubdomainCarriersWithResponse request returning *GetMsteamsSubdomainCarriersResponse
func (c *ClientWithResponses) GetMsteamsSubdomainCarriersWithResponse(ctx context.Context, subdomain string, params *GetMsteamsSubdomainCarriersParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubdomainCarriersResponse, error) {
	rsp, err := c.GetMsteamsSubdomainCarriers(ctx, subdomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMsteamsSubdomainCarriersResponse(rsp)
}

// GetMsteamsSubdomainCarriersIdNumbersWithResponse request returning *GetMsteamsSubdomainCarriersIdNumbersResponse
func (c *ClientWithResponses) GetMsteamsSubdomainCarriersIdNumbersWithResponse(ctx context.Context, subdomain string, id string, params *GetMsteamsSubdomainCarriersIdNumbersParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubdomainCarriersIdNumbersResponse, error) {
	rsp, err := c.GetMsteamsSubdomainCarriersIdNumbers(ctx, subdomain, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMsteamsSubdomainCarriersIdNumbersResponse(rsp)
}

// PostMsteamsSubdomainCarriersIdNumbersWithBodyWithResponse request with arbitrary body returning *PostMsteamsSubdomainCarriersIdNumbersResponse
func (c *ClientWithResponses) PostMsteamsSubdomainCarriersIdNumbersWithBodyWithResponse(ctx context.Context, subdomain string, id string, params *PostMsteamsSubdomainCarriersIdNumbersParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMsteamsSubdomainCarriersIdNumbersResponse, error) {
	rsp, err := c.PostMsteamsSubdomainCarriersIdNumbersWithBody(ctx, subdomain, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMsteamsSubdomainCarriersIdNumbersResponse(rsp)
}

func (c *ClientWithResponses) PostMsteamsSubdomainCarriersIdNumbersWithResponse(ctx context.Context, subdomain string, id string, params *PostMsteamsSubdomainCarriersIdNumbersParams, body PostMsteamsSubdomainCarriersIdNumbersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMsteamsSubdomainCarriersIdNumbersResponse, error) {
	rsp, err := c.PostMsteamsSubdomainCarriersIdNumbers(ctx, subdomain, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMsteamsSubdomainCarriersIdNumbersResponse(rsp)
}

// GetMsteamsSubdomainEmergencyAddressesWithResponse request returning *GetMsteamsSubdomainEmergencyAddressesResponse
func (c *ClientWithResponses) GetMsteamsSubdomainEmergencyAddressesWithResponse(ctx context.Context, subdomain string, params *GetMsteamsSubdomainEmergencyAddressesParams, reqEditors ...RequestEditorFn) (*GetMsteamsSubdomainEmergencyAddressesResponse, error) {
	rsp, err := c.GetMsteamsSubdomainEmergencyAddresses(ctx, subdomain, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMsteamsSubdomainEmergencyAddressesResponse(rsp)
}

// PostMsteamsSubdomainEmergencyAddressesWithBodyWithResponse request with arbitrary body returning *PostMsteamsSubdomainEmergencyAddressesResponse
func (c *ClientWithResponses) PostMsteamsSubdomainEmergencyAddressesWithBodyWithResponse(ctx context.Context, subdomain string, params *PostMsteamsSubdomainEmergencyAddressesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostMsteamsSubdomainEmergencyAddressesResponse, error) {
	rsp, err := c.PostMsteamsSubdomainEmergencyAddressesWithBody(ctx, subdomain, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMsteamsSubdomainEmergencyAddressesResponse(rsp)
}

func (c *ClientWithResponses) PostMsteamsSubdomainEmergencyAddressesWithResponse(ctx context.Context, subdomain string, params *PostMsteamsSubdomainEmergencyAddressesParams, body PostMsteamsSubdomainEmergencyAddressesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostMsteamsSubdomainEmergencyAddressesResponse, error) {
	rsp, err := c.PostMsteamsSubdomainEmergencyAddresses(ctx, subdomain, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMsteamsSubdomainEmergencyAddressesResponse(rsp)
}

// DeleteMsteamsSubdomainEmergencyAddressesIdWithResponse request returning *DeleteMsteamsSubdomainEmergencyAddressesIdResponse
func (c *ClientWithResponses) DeleteMsteamsSubdomainEmergencyAddressesIdWithResponse(ctx context.Context, subdomain string, id string, params *DeleteMsteamsSubdomainEmergencyAddressesIdParams, reqEditors ...RequestEditorFn) (*DeleteMsteamsSubdomainEmergencyAddressesIdResponse, error) {
	rsp, err := c.DeleteMsteamsSubdomainEmergencyAddressesId(ctx, subdomain, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMsteamsSubdomainEmergencyAddressesIdResponse(rsp)
}

// PutMsteamsSubdomainEmergencyAddressesIdWithBodyWithResponse request with arbitrary body returning *PutMsteamsSubdomainEmergencyAddressesIdResponse
func (c *ClientWithResponses) PutMsteamsSubdomainEmergencyAddressesIdWithBodyWithResponse(ctx context.Context, subdomain string, id string, params *PutMsteamsSubdomainEmergencyAddressesIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMsteamsSubdomainEmergencyAddressesIdResponse, error) {
	rsp, err := c.PutMsteamsSubdomainEmergencyAddressesIdWithBody(ctx, subdomain, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMsteamsSubdomainEmergencyAddressesIdResponse(rsp)
}

func (c *ClientWithResponses) PutMsteamsSubdomainEmergencyAddressesIdWithResponse(ctx context.Context, subdomain string, id string, params *PutMsteamsSubdomainEmergencyAddressesIdParams, body PutMsteamsSubdomainEmergencyAddressesIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMsteamsSubdomainEmergencyAddressesIdResponse, error) {
	rsp, err := c.PutMsteamsSubdomainEmergencyAddressesId(ctx, subdomain, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMsteamsSubdomainEmergencyAddressesIdResponse(rsp)
}

// PostOauth2AuthorizeWithBodyWithResponse request with arbitrary body returning *PostOauth2AuthorizeResponse
func (c *ClientWithResponses) PostOauth2AuthorizeWithBodyWithResponse(ctx context.Context, params *PostOauth2AuthorizeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOauth2AuthorizeResponse, error) {
	rsp, err := c.PostOauth2AuthorizeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2AuthorizeResponse(rsp)
}

func (c *ClientWithResponses) PostOauth2AuthorizeWithFormdataBodyWithResponse(ctx context.Context, params *PostOauth2AuthorizeParams, body PostOauth2AuthorizeFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostOauth2AuthorizeResponse, error) {
	rsp, err := c.PostOauth2AuthorizeWithFormdataBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOauth2AuthorizeResponse(rsp)
}

// GetSiteWithResponse request returning *GetSiteResponse
func (c *ClientWithResponses) GetSiteWithResponse(ctx context.Context, params *GetSiteParams, reqEditors ...RequestEditorFn) (*GetSiteResponse, error) {
	rsp, err := c.GetSite(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSiteResponse(rsp)
}

// PostSiteWithBodyWithResponse request with arbitrary body returning *PostSiteResponse
func (c *ClientWithResponses) PostSiteWithBodyWithResponse(ctx context.Context, params *PostSiteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSiteResponse, error) {
	rsp, err := c.PostSiteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSiteResponse(rsp)
}

func (c *ClientWithResponses) PostSiteWithResponse(ctx context.Context, params *PostSiteParams, body PostSiteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostSiteResponse, error) {
	rsp, err := c.PostSite(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSiteResponse(rsp)
}

// DeleteSiteIdWithResponse request returning *DeleteSiteIdResponse
func (c *ClientWithResponses) DeleteSiteIdWithResponse(ctx context.Context, id string, params *DeleteSiteIdParams, reqEditors ...RequestEditorFn) (*DeleteSiteIdResponse, error) {
	rsp, err := c.DeleteSiteId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSiteIdResponse(rsp)
}

// GetSiteIdWithResponse request returning *GetSiteIdResponse
func (c *ClientWithResponses) GetSiteIdWithResponse(ctx context.Context, id string, params *GetSiteIdParams, reqEditors ...RequestEditorFn) (*GetSiteIdResponse, error) {
	rsp, err := c.GetSiteId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSiteIdResponse(rsp)
}

// PutSiteIdWithBodyWithResponse request with arbitrary body returning *PutSiteIdResponse
func (c *ClientWithResponses) PutSiteIdWithBodyWithResponse(ctx context.Context, id string, params *PutSiteIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutSiteIdResponse, error) {
	rsp, err := c.PutSiteIdWithBody(ctx, id, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSiteIdResponse(rsp)
}

func (c *ClientWithResponses) PutSiteIdWithResponse(ctx context.Context, id string, params *PutSiteIdParams, body PutSiteIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutSiteIdResponse, error) {
	rsp, err := c.PutSiteId(ctx, id, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutSiteIdResponse(rsp)
}

// GetZoomWithResponse request returning *GetZoomResponse
func (c *ClientWithResponses) GetZoomWithResponse(ctx context.Context, params *GetZoomParams, reqEditors ...RequestEditorFn) (*GetZoomResponse, error) {
	rsp, err := c.GetZoom(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoomResponse(rsp)
}

// PostZoomWithBodyWithResponse request with arbitrary body returning *PostZoomResponse
func (c *ClientWithResponses) PostZoomWithBodyWithResponse(ctx context.Context, params *PostZoomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZoomResponse, error) {
	rsp, err := c.PostZoomWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZoomResponse(rsp)
}

func (c *ClientWithResponses) PostZoomWithResponse(ctx context.Context, params *PostZoomParams, body PostZoomJSONRequestBody, reqEditors ...RequestEditorFn) (*PostZoomResponse, error) {
	rsp, err := c.PostZoom(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZoomResponse(rsp)
}

// GetZoomProvisionToIdWithResponse request returning *GetZoomProvisionToIdResponse
func (c *ClientWithResponses) GetZoomProvisionToIdWithResponse(ctx context.Context, id string, params *GetZoomProvisionToIdParams, reqEditors ...RequestEditorFn) (*GetZoomProvisionToIdResponse, error) {
	rsp, err := c.GetZoomProvisionToId(ctx, id, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZoomProvisionToIdResponse(rsp)
}

// ParseGetAccountsResponse parses an HTTP response from a GetAccountsWithResponse call
func ParseGetAccountsResponse(rsp *http.Response) (*GetAccountsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountsCustomersResponse parses an HTTP response from a GetAccountsCustomersWithResponse call
func ParseGetAccountsCustomersResponse(rsp *http.Response) (*GetAccountsCustomersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsCustomersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfAccountInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetAccountsResellersResponse parses an HTTP response from a GetAccountsResellersWithResponse call
func ParseGetAccountsResellersResponse(rsp *http.Response) (*GetAccountsResellersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsResellersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfAccountInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostAccountsResellersResponse parses an HTTP response from a PostAccountsResellersWithResponse call
func ParsePostAccountsResellersResponse(rsp *http.Response) (*PostAccountsResellersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAccountsResellersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAccountsIdResponse parses an HTTP response from a DeleteAccountsIdWithResponse call
func ParseDeleteAccountsIdResponse(rsp *http.Response) (*DeleteAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAccountsIdResponse parses an HTTP response from a GetAccountsIdWithResponse call
func ParseGetAccountsIdResponse(rsp *http.Response) (*GetAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutAccountsIdResponse parses an HTTP response from a PutAccountsIdWithResponse call
func ParsePutAccountsIdResponse(rsp *http.Response) (*PutAccountsIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAccountsIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCallForwardingCustomerIdResponse parses an HTTP response from a PostCallForwardingCustomerIdWithResponse call
func ParsePostCallForwardingCustomerIdResponse(rsp *http.Response) (*PostCallForwardingCustomerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallForwardingCustomerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutCallForwardingCustomerIdResponse parses an HTTP response from a PutCallForwardingCustomerIdWithResponse call
func ParsePutCallForwardingCustomerIdResponse(rsp *http.Response) (*PutCallForwardingCustomerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutCallForwardingCustomerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallForwardingCustomerIdPhoneNumberResponse parses an HTTP response from a GetCallForwardingCustomerIdPhoneNumberWithResponse call
func ParseGetCallForwardingCustomerIdPhoneNumberResponse(rsp *http.Response) (*GetCallForwardingCustomerIdPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCallForwardingCustomerIdPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallForwardingInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCallForwardingIdResponse parses an HTTP response from a DeleteCallForwardingIdWithResponse call
func ParseDeleteCallForwardingIdResponse(rsp *http.Response) (*DeleteCallForwardingIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallForwardingIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCallingPartyNumberCustomerIdResponse parses an HTTP response from a PostCallingPartyNumberCustomerIdWithResponse call
func ParsePostCallingPartyNumberCustomerIdResponse(rsp *http.Response) (*PostCallingPartyNumberCustomerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallingPartyNumberCustomerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCallingPartyNumberPhoneNumberResponse parses an HTTP response from a DeleteCallingPartyNumberPhoneNumberWithResponse call
func ParseDeleteCallingPartyNumberPhoneNumberResponse(rsp *http.Response) (*DeleteCallingPartyNumberPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallingPartyNumberPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCallingPartyNumberPhoneNumberResponse parses an HTTP response from a GetCallingPartyNumberPhoneNumberWithResponse call
func ParseGetCallingPartyNumberPhoneNumberResponse(rsp *http.Response) (*GetCallingPartyNumberPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCallingPartyNumberPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CallingPartyNumberInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostCnamCustomerIdResponse parses an HTTP response from a PostCnamCustomerIdWithResponse call
func ParsePostCnamCustomerIdResponse(rsp *http.Response) (*PostCnamCustomerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCnamCustomerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCnamPhoneNumberResponse parses an HTTP response from a DeleteCnamPhoneNumberWithResponse call
func ParseDeleteCnamPhoneNumberResponse(rsp *http.Response) (*DeleteCnamPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCnamPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetCnamPhoneNumberResponse parses an HTTP response from a GetCnamPhoneNumberWithResponse call
func ParseGetCnamPhoneNumberResponse(rsp *http.Response) (*GetCnamPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetCnamPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CNAMInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteDisasterPlanCustomerIdResponse parses an HTTP response from a DeleteDisasterPlanCustomerIdWithResponse call
func ParseDeleteDisasterPlanCustomerIdResponse(rsp *http.Response) (*DeleteDisasterPlanCustomerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDisasterPlanCustomerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetDisasterPlanCustomerIdResponse parses an HTTP response from a GetDisasterPlanCustomerIdWithResponse call
func ParseGetDisasterPlanCustomerIdResponse(rsp *http.Response) (*GetDisasterPlanCustomerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDisasterPlanCustomerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DisasterPlanInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostDisasterPlanCustomerIdResponse parses an HTTP response from a PostDisasterPlanCustomerIdWithResponse call
func ParsePostDisasterPlanCustomerIdResponse(rsp *http.Response) (*PostDisasterPlanCustomerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDisasterPlanCustomerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutDisasterPlanCustomerIdResponse parses an HTTP response from a PutDisasterPlanCustomerIdWithResponse call
func ParsePutDisasterPlanCustomerIdResponse(rsp *http.Response) (*PutDisasterPlanCustomerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutDisasterPlanCustomerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostInternationalCallingCustomerIdResponse parses an HTTP response from a PostInternationalCallingCustomerIdWithResponse call
func ParsePostInternationalCallingCustomerIdResponse(rsp *http.Response) (*PostInternationalCallingCustomerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostInternationalCallingCustomerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteInternationalCallingPhoneNumberResponse parses an HTTP response from a DeleteInternationalCallingPhoneNumberWithResponse call
func ParseDeleteInternationalCallingPhoneNumberResponse(rsp *http.Response) (*DeleteInternationalCallingPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInternationalCallingPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInternationalCallingPhoneNumberResponse parses an HTTP response from a GetInternationalCallingPhoneNumberWithResponse call
func ParseGetInternationalCallingPhoneNumberResponse(rsp *http.Response) (*GetInternationalCallingPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInternationalCallingPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest InternationalCallingInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMsteamsResponse parses an HTTP response from a GetMsteamsWithResponse call
func ParseGetMsteamsResponse(rsp *http.Response) (*GetMsteamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMsteamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMsteamsSubDomainNumbersResponse parses an HTTP response from a GetMsteamsSubDomainNumbersWithResponse call
func ParseGetMsteamsSubDomainNumbersResponse(rsp *http.Response) (*GetMsteamsSubDomainNumbersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMsteamsSubDomainNumbersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfnumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMsteamsSubDomainUsersResponse parses an HTTP response from a GetMsteamsSubDomainUsersWithResponse call
func ParseGetMsteamsSubDomainUsersResponse(rsp *http.Response) (*GetMsteamsSubDomainUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMsteamsSubDomainUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfuser
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMsteamsSubDomainUsersResponse parses an HTTP response from a PostMsteamsSubDomainUsersWithResponse call
func ParsePostMsteamsSubDomainUsersResponse(rsp *http.Response) (*PostMsteamsSubDomainUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMsteamsSubDomainUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMsteamsSubDomainUsersIdResponse parses an HTTP response from a DeleteMsteamsSubDomainUsersIdWithResponse call
func ParseDeleteMsteamsSubDomainUsersIdResponse(rsp *http.Response) (*DeleteMsteamsSubDomainUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMsteamsSubDomainUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetMsteamsSubDomainUsersIdResponse parses an HTTP response from a GetMsteamsSubDomainUsersIdWithResponse call
func ParseGetMsteamsSubDomainUsersIdResponse(rsp *http.Response) (*GetMsteamsSubDomainUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMsteamsSubDomainUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMsteamsSubDomainUsersIdResponse parses an HTTP response from a PutMsteamsSubDomainUsersIdWithResponse call
func ParsePutMsteamsSubDomainUsersIdResponse(rsp *http.Response) (*PutMsteamsSubDomainUsersIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMsteamsSubDomainUsersIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMsteamsSubdomainCarriersResponse parses an HTTP response from a GetMsteamsSubdomainCarriersWithResponse call
func ParseGetMsteamsSubdomainCarriersResponse(rsp *http.Response) (*GetMsteamsSubdomainCarriersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMsteamsSubdomainCarriersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfCarrierInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMsteamsSubdomainCarriersIdNumbersResponse parses an HTTP response from a GetMsteamsSubdomainCarriersIdNumbersWithResponse call
func ParseGetMsteamsSubdomainCarriersIdNumbersResponse(rsp *http.Response) (*GetMsteamsSubdomainCarriersIdNumbersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMsteamsSubdomainCarriersIdNumbersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMsteamsSubdomainCarriersIdNumbersResponse parses an HTTP response from a PostMsteamsSubdomainCarriersIdNumbersWithResponse call
func ParsePostMsteamsSubdomainCarriersIdNumbersResponse(rsp *http.Response) (*PostMsteamsSubdomainCarriersIdNumbersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMsteamsSubdomainCarriersIdNumbersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetMsteamsSubdomainEmergencyAddressesResponse parses an HTTP response from a GetMsteamsSubdomainEmergencyAddressesWithResponse call
func ParseGetMsteamsSubdomainEmergencyAddressesResponse(rsp *http.Response) (*GetMsteamsSubdomainEmergencyAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMsteamsSubdomainEmergencyAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfEmergencyAddresses
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostMsteamsSubdomainEmergencyAddressesResponse parses an HTTP response from a PostMsteamsSubdomainEmergencyAddressesWithResponse call
func ParsePostMsteamsSubdomainEmergencyAddressesResponse(rsp *http.Response) (*PostMsteamsSubdomainEmergencyAddressesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMsteamsSubdomainEmergencyAddressesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMsteamsSubdomainEmergencyAddressesIdResponse parses an HTTP response from a DeleteMsteamsSubdomainEmergencyAddressesIdWithResponse call
func ParseDeleteMsteamsSubdomainEmergencyAddressesIdResponse(rsp *http.Response) (*DeleteMsteamsSubdomainEmergencyAddressesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMsteamsSubdomainEmergencyAddressesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutMsteamsSubdomainEmergencyAddressesIdResponse parses an HTTP response from a PutMsteamsSubdomainEmergencyAddressesIdWithResponse call
func ParsePutMsteamsSubdomainEmergencyAddressesIdResponse(rsp *http.Response) (*PutMsteamsSubdomainEmergencyAddressesIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMsteamsSubdomainEmergencyAddressesIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostOauth2AuthorizeResponse parses an HTTP response from a PostOauth2AuthorizeWithResponse call
func ParsePostOauth2AuthorizeResponse(rsp *http.Response) (*PostOauth2AuthorizeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOauth2AuthorizeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccessToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetSiteResponse parses an HTTP response from a GetSiteWithResponse call
func ParseGetSiteResponse(rsp *http.Response) (*GetSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ArrayOfDepartmentInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostSiteResponse parses an HTTP response from a PostSiteWithResponse call
func ParsePostSiteResponse(rsp *http.Response) (*PostSiteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSiteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSiteIdResponse parses an HTTP response from a DeleteSiteIdWithResponse call
func ParseDeleteSiteIdResponse(rsp *http.Response) (*DeleteSiteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSiteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSiteIdResponse parses an HTTP response from a GetSiteIdWithResponse call
func ParseGetSiteIdResponse(rsp *http.Response) (*GetSiteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSiteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest DepartmentInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutSiteIdResponse parses an HTTP response from a PutSiteIdWithResponse call
func ParsePutSiteIdResponse(rsp *http.Response) (*PutSiteIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutSiteIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetZoomResponse parses an HTTP response from a GetZoomWithResponse call
func ParseGetZoomResponse(rsp *http.Response) (*GetZoomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostZoomResponse parses an HTTP response from a PostZoomWithResponse call
func ParsePostZoomResponse(rsp *http.Response) (*PostZoomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostZoomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Status
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetZoomProvisionToIdResponse parses an HTTP response from a GetZoomProvisionToIdWithResponse call
func ParseGetZoomProvisionToIdResponse(rsp *http.Response) (*GetZoomProvisionToIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZoomProvisionToIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
